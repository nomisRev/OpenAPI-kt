{
  "info": {
    "version": "1.1.4",
    "title": "GitHub v3 REST API",
    "description": "GitHub's v3 REST API.",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT"
    },
    "termsOfService": "https://docs.github.com/articles/github-terms-of-service",
    "contact": {
      "name": "Support",
      "url": "https://support.github.com/contact?tags=dotcom-rest-api"
    },
    "servers": [
      {
        "url": "https://api.github.com"
      }
    ],
    "paths": {
      "/users/{username}/following": {
        "get": {
          "summary": "List the people a user follows",
          "description": "Lists the people who the specified user follows.",
          "tags": [
            "users"
          ],
          "operationId": "users/list-following-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/followers#list-the-people-a-user-follows"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/simple-user"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/simple-user-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "followers"
          }
        }
      },
      "/users/{username}/projects": {
        "get": {
          "summary": "List user projects",
          "description": "> [!WARNING]\n> **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.\n> See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.",
          "tags": [
            "projects-classic"
          ],
          "operationId": "projects-classic/list-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/projects-classic/projects#list-user-projects"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "state",
              "description": "Indicates the state of the projects to return.",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "open",
                  "closed",
                  "all"
                ],
                "default": "open"
              }
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/project"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/project-items-3"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/validation_failed"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "projects-classic",
            "subcategory": "projects",
            "deprecationDate": "2024-05-23",
            "removalDate": "2025-04-01"
          },
          "deprecated": true
        }
      },
      "/users/{username}/repos": {
        "get": {
          "summary": "List repositories for a user",
          "description": "Lists public repositories for the specified user.",
          "tags": [
            "repos"
          ],
          "operationId": "repos/list-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/repos/repos#list-repositories-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "type",
              "description": "Limit results to repositories of the specified type.",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "all",
                  "owner",
                  "member"
                ],
                "default": "owner"
              }
            },
            {
              "name": "sort",
              "description": "The property to sort the results by.",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "created",
                  "updated",
                  "pushed",
                  "full_name"
                ],
                "default": "full_name"
              }
            },
            {
              "name": "direction",
              "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              }
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/minimal-repository"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/minimal-repository-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "repos",
            "subcategory": "repos"
          }
        }
      },
      "/users/{username}/attestations/digest/{subject_digest}": {
        "delete": {
          "summary": "Delete attestations by subject digest",
          "description": "Delete an artifact attestation by subject digest.",
          "tags": [
            "users"
          ],
          "operationId": "users/delete-attestations-by-subject-digest",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/attestations#delete-attestations-by-subject-digest"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "subject_digest",
              "description": "Subject Digest",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-multi-segment": true
            }
          ],
          "responses": {
            "200": {
              "description": "Response"
            },
            "204": {
              "description": "Response"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "attestations"
          }
        }
      },
      "/users/{username}/hovercard": {
        "get": {
          "summary": "Get contextual information for a user",
          "description": "Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\n  The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.",
          "tags": [
            "users"
          ],
          "operationId": "users/get-context-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/users#get-contextual-information-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "subject_type",
              "description": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "organization",
                  "repository",
                  "issue",
                  "pull_request"
                ]
              }
            },
            {
              "name": "subject_id",
              "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/hovercard"
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/hovercard"
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            },
            "422": {
              "$ref": "#/components/responses/validation_failed"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "users",
            "subcategory": "users"
          }
        }
      },
      "/users/{username}/social_accounts": {
        "get": {
          "summary": "List social accounts for a user",
          "description": "Lists social media accounts for a user. This endpoint is accessible by anyone.",
          "tags": [
            "users"
          ],
          "operationId": "users/list-social-accounts-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/social-account"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/social-account-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "social-accounts"
          }
        }
      },
      "/users/{username}/ssh_signing_keys": {
        "get": {
          "summary": "List SSH signing keys for a user",
          "description": "Lists the SSH signing keys for a user. This operation is accessible by anyone.",
          "tags": [
            "users"
          ],
          "operationId": "users/list-ssh-signing-keys-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ssh-signing-key"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/ssh-signing-key-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "ssh-signing-keys"
          }
        }
      },
      "/users/{username}/keys": {
        "get": {
          "summary": "List public keys for a user",
          "description": "Lists the _verified_ public SSH keys for a user. This is accessible by anyone.",
          "tags": [
            "users"
          ],
          "operationId": "users/list-public-keys-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/keys#list-public-keys-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/key-simple"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/key-simple-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "keys"
          }
        }
      },
      "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
        "get": {
          "summary": "Get a package version for a user",
          "description": "Gets a specific package version for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/get-package-version-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#get-a-package-version-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/package-type"
            },
            {
              "$ref": "#/components/parameters/package-name"
            },
            {
              "$ref": "#/components/parameters/package-version-id"
            },
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/package-version"
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/package-version-user"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        },
        "delete": {
          "summary": "Delete package version for a user",
          "description": "Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/delete-package-version-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#delete-package-version-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/package-type"
            },
            {
              "$ref": "#/components/parameters/package-name"
            },
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/package-version-id"
            }
          ],
          "responses": {
            "204": {
              "description": "Response"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "401": {
              "$ref": "#/components/responses/requires_authentication"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        }
      },
      "/users/{username}/followers": {
        "get": {
          "summary": "List followers of a user",
          "description": "Lists the people following the specified user.",
          "tags": [
            "users"
          ],
          "operationId": "users/list-followers-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/followers#list-followers-of-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/simple-user"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/simple-user-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "followers"
          }
        }
      },
      "/users/{username}/attestations/{subject_digest}": {
        "get": {
          "summary": "List attestations",
          "description": "List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).",
          "tags": [
            "users"
          ],
          "operationId": "users/list-attestations",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/attestations#list-attestations"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/pagination-before"
            },
            {
              "$ref": "#/components/parameters/pagination-after"
            },
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "subject_digest",
              "description": "Subject Digest",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-multi-segment": true
            },
            {
              "name": "predicate_type",
              "description": "Optional filter for fetching attestations with a given predicate type.\nThis option accepts `provenance`, `sbom`, or freeform text for custom predicate types.",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "attestations": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "bundle": {
                              "type": "object",
                              "properties": {
                                "mediaType": {
                                  "type": "string"
                                },
                                "verificationMaterial": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": true
                                },
                                "dsseEnvelope": {
                                  "type": "object",
                                  "properties": {},
                                  "additionalProperties": true
                                }
                              },
                              "description": "The attestation's Sigstore Bundle.\nRefer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information."
                            },
                            "repository_id": {
                              "type": "integer"
                            },
                            "bundle_url": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/list-attestations"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/empty-object"
                  },
                  "examples": {
                    "default": {
                      "value": null
                    }
                  }
                }
              }
            },
            "204": {
              "description": "Response"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "attestations"
          }
        }
      },
      "/users/{username}/received_events/public": {
        "get": {
          "summary": "List public events received by a user",
          "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
          "tags": [
            "activity"
          ],
          "operationId": "activity/list-received-public-events-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/activity/events#list-public-events-received-by-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/event"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/user-received-public-events-items"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "activity",
            "subcategory": "events"
          }
        }
      },
      "/users/{username}/settings/billing/usage": {
        "get": {
          "summary": "Get billing usage report for a user",
          "description": "Gets a report of the total usage for a user.\n\n**Note:** This endpoint is only available to users with access to the enhanced billing platform.",
          "tags": [
            "billing"
          ],
          "operationId": "billing/get-github-billing-usage-report-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/billing/enhanced-billing#get-billing-usage-report-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/billing-usage-report-year"
            },
            {
              "$ref": "#/components/parameters/billing-usage-report-month"
            },
            {
              "$ref": "#/components/parameters/billing-usage-report-day"
            },
            {
              "$ref": "#/components/parameters/billing-usage-report-hour"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/billing_usage_report_user"
            },
            "400": {
              "$ref": "#/components/responses/bad_request"
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "500": {
              "$ref": "#/components/responses/internal_error"
            },
            "503": {
              "$ref": "#/components/responses/service_unavailable"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "billing",
            "subcategory": "enhanced-billing"
          }
        }
      },
      "/users/{username}/events": {
        "get": {
          "summary": "List events for the authenticated user",
          "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. _Optional_: use the fine-grained token with following permission set to view private events: \"Events\" user permissions (read).\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
          "tags": [
            "activity"
          ],
          "operationId": "activity/list-events-for-authenticated-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/activity/events#list-events-for-the-authenticated-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/event"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/user-events-items"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "activity",
            "subcategory": "events"
          }
        }
      },
      "/users/{username}/gpg_keys": {
        "get": {
          "summary": "List GPG keys for a user",
          "description": "Lists the GPG keys for a user. This information is accessible by anyone.",
          "tags": [
            "users"
          ],
          "operationId": "users/list-gpg-keys-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/gpg-keys#list-gpg-keys-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/gpg-key"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/gpg-key-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "gpg-keys"
          }
        }
      },
      "/users/{username}/orgs": {
        "get": {
          "summary": "List organizations for a user",
          "description": "List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.",
          "tags": [
            "orgs"
          ],
          "operationId": "orgs/list-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/orgs/orgs#list-organizations-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/organization-simple"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/organization-simple-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "orgs",
            "subcategory": "orgs"
          }
        }
      },
      "/users/{username}/gists": {
        "get": {
          "summary": "List gists for a user",
          "description": "Lists public gists for the specified user:",
          "tags": [
            "gists"
          ],
          "operationId": "gists/list-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/gists/gists#list-gists-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/since"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/base-gist"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/base-gist-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/validation_failed"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "gists",
            "subcategory": "gists"
          }
        }
      },
      "/users/{username}/settings/billing/actions": {
        "get": {
          "summary": "Get GitHub Actions billing for a user",
          "description": "Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
          "operationId": "billing/get-github-actions-billing-user",
          "tags": [
            "billing"
          ],
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/billing/billing#get-github-actions-billing-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/actions-billing-usage"
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/actions-billing-usage"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "billing",
            "subcategory": "billing"
          }
        }
      },
      "/users/{username}/events/orgs/{org}": {
        "get": {
          "summary": "List organization events for the authenticated user",
          "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
          "tags": [
            "activity"
          ],
          "operationId": "activity/list-org-events-for-authenticated-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/activity/events#list-organization-events-for-the-authenticated-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/org"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/event"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/user-org-events-items"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "activity",
            "subcategory": "events"
          }
        }
      },
      "/users/{username}/following/{target_user}": {
        "get": {
          "summary": "Check if a user follows another user",
          "description": "",
          "tags": [
            "users"
          ],
          "operationId": "users/check-following-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/followers#check-if-a-user-follows-another-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "target_user",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "if the user follows the target user"
            },
            "404": {
              "description": "if the user does not follow the target user"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "followers"
          }
        }
      },
      "/users/{username}/subscriptions": {
        "get": {
          "summary": "List repositories watched by a user",
          "description": "Lists repositories a user is watching.",
          "tags": [
            "activity"
          ],
          "operationId": "activity/list-repos-watched-by-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/activity/watching#list-repositories-watched-by-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/minimal-repository"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/minimal-repository-items"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "activity",
            "subcategory": "watching"
          }
        }
      },
      "/users/{username}/attestations/{attestation_id}": {
        "delete": {
          "summary": "Delete attestations by ID",
          "description": "Delete an artifact attestation by unique ID that is associated with a repository owned by a user.",
          "tags": [
            "users"
          ],
          "operationId": "users/delete-attestations-by-id",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/attestations#delete-attestations-by-id"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "attestation_id",
              "description": "Attestation ID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Response"
            },
            "204": {
              "description": "Response"
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "attestations"
          }
        }
      },
      "/users/{username}/attestations/delete-request": {
        "post": {
          "summary": "Delete attestations in bulk",
          "description": "Delete artifact attestations in bulk by either subject digests or unique ID.",
          "tags": [
            "users"
          ],
          "operationId": "users/delete-attestations-bulk",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/attestations#delete-attestations-in-bulk"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "oneOf": [
                    {
                      "properties": {
                        "subject_digests": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of subject digests associated with the artifact attestations to delete.",
                          "minItems": 1,
                          "maxItems": 1024
                        }
                      },
                      "required": [
                        "subject_digests"
                      ]
                    },
                    {
                      "properties": {
                        "attestation_ids": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          },
                          "description": "List of unique IDs associated with the artifact attestations to delete.",
                          "minItems": 1,
                          "maxItems": 1024
                        }
                      },
                      "required": [
                        "attestation_ids"
                      ]
                    }
                  ],
                  "description": "The request body must include either `subject_digests` or `attestation_ids`, but not both."
                },
                "examples": {
                  "by-subject-digests": {
                    "summary": "Delete by subject digests",
                    "value": {
                      "subject_digests": [
                        "sha256:abc123",
                        "sha512:def456"
                      ]
                    }
                  },
                  "by-attestation-ids": {
                    "summary": "Delete by attestation IDs",
                    "value": {
                      "attestation_ids": [
                        111,
                        222
                      ]
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Response"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "attestations"
          }
        }
      },
      "/users/{username}/packages/{package_type}/{package_name}/restore": {
        "post": {
          "summary": "Restore a package for a user",
          "description": "Restores an entire package for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/restore-package-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#restore-a-package-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/package-type"
            },
            {
              "$ref": "#/components/parameters/package-name"
            },
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "name": "token",
              "description": "package token",
              "schema": {
                "type": "string"
              },
              "required": false,
              "in": "query"
            }
          ],
          "responses": {
            "204": {
              "description": "Response"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "401": {
              "$ref": "#/components/responses/requires_authentication"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        }
      },
      "/users/{username}/events/public": {
        "get": {
          "summary": "List public events for a user",
          "description": "> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
          "tags": [
            "activity"
          ],
          "operationId": "activity/list-public-events-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/activity/events#list-public-events-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/event"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/user-public-events-items"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "activity",
            "subcategory": "events"
          }
        }
      },
      "/users/{username}/packages": {
        "get": {
          "summary": "List packages for a user",
          "description": "Lists all packages in a user's namespace for which the requesting user has access.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/list-packages-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#list-packages-for-a-user"
          },
          "parameters": [
            {
              "name": "package_type",
              "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "npm",
                  "maven",
                  "rubygems",
                  "docker",
                  "nuget",
                  "container"
                ]
              }
            },
            {
              "$ref": "#/components/parameters/package-visibility"
            },
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/page"
            },
            {
              "$ref": "#/components/parameters/per-page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/package"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/packages-for-user"
                    }
                  }
                }
              }
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "401": {
              "$ref": "#/components/responses/requires_authentication"
            },
            "400": {
              "$ref": "#/components/responses/package_es_list_error"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        }
      },
      "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
        "post": {
          "summary": "Restore package version for a user",
          "description": "Restores a specific package version for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/restore-package-version-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#restore-package-version-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/package-type"
            },
            {
              "$ref": "#/components/parameters/package-name"
            },
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/package-version-id"
            }
          ],
          "responses": {
            "204": {
              "description": "Response"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "401": {
              "$ref": "#/components/responses/requires_authentication"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        }
      },
      "/users/{username}/settings/billing/packages": {
        "get": {
          "summary": "Get GitHub Packages billing for a user",
          "description": "Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
          "operationId": "billing/get-github-packages-billing-user",
          "tags": [
            "billing"
          ],
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/billing/billing#get-github-packages-billing-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/packages-billing-usage"
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/packages-billing-usage"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "billing",
            "subcategory": "billing"
          }
        }
      },
      "/users/{username}/docker/conflicts": {
        "get": {
          "summary": "Get list of conflicting packages during Docker migration for user",
          "description": "Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.",
          "tags": [
            "packages"
          ],
          "operationId": "packages/list-docker-migration-conflicting-packages-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/package"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/packages-for-user"
                    }
                  }
                }
              }
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "401": {
              "$ref": "#/components/responses/requires_authentication"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        }
      },
      "/users/{username}/installation": {
        "get": {
          "summary": "Get a user installation for the authenticated app",
          "description": "Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
          "tags": [
            "apps"
          ],
          "operationId": "apps/get-user-installation",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/apps/apps#get-a-user-installation-for-the-authenticated-app"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/installation"
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/installation"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "apps",
            "subcategory": "apps"
          }
        }
      },
      "/users/{username}/packages/{package_type}/{package_name}": {
        "get": {
          "summary": "Get a package for a user",
          "description": "Gets a specific package metadata for a public package owned by a user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/get-package-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#get-a-package-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/package-type"
            },
            {
              "$ref": "#/components/parameters/package-name"
            },
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/package"
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/package-user"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        },
        "delete": {
          "summary": "Delete a package for a user",
          "description": "Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/delete-package-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#delete-a-package-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/package-type"
            },
            {
              "$ref": "#/components/parameters/package-name"
            },
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "204": {
              "description": "Response"
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "401": {
              "$ref": "#/components/responses/requires_authentication"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        }
      },
      "/users/{username}/received_events": {
        "get": {
          "summary": "List events received by the authenticated user",
          "description": "These are events that you've received by watching repositories and following users. If you are authenticated as the\ngiven user, you will see private events. Otherwise, you'll only see public events.\n\n> [!NOTE]\n> This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.",
          "tags": [
            "activity"
          ],
          "operationId": "activity/list-received-events-for-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/activity/events#list-events-received-by-the-authenticated-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/event"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/user-received-events-items"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "activity",
            "subcategory": "events"
          }
        }
      },
      "/users/{username}": {
        "get": {
          "summary": "Get a user",
          "description": "Provides publicly available information about someone with a GitHub account.\n\nIf you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).",
          "tags": [
            "users"
          ],
          "operationId": "users/get-by-username",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/users#get-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/private-user"
                      },
                      {
                        "$ref": "#/components/schemas/public-user"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "user_view_type",
                      "mapping": {
                        "public": "#/components/schemas/public-user",
                        "private": "#/components/schemas/private-user"
                      }
                    }
                  },
                  "examples": {
                    "default-response": {
                      "$ref": "#/components/examples/public-user-default-response"
                    },
                    "response-with-git-hub-plan-information": {
                      "$ref": "#/components/examples/public-user-response-with-git-hub-plan-information"
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "users"
          }
        }
      },
      "/users/{username}/starred": {
        "get": {
          "summary": "List repositories starred by a user",
          "description": "Lists repositories a user has starred.\n\nThis endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.",
          "tags": [
            "activity"
          ],
          "operationId": "activity/list-repos-starred-by-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/activity/starring#list-repositories-starred-by-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            },
            {
              "$ref": "#/components/parameters/sort-starred"
            },
            {
              "$ref": "#/components/parameters/direction"
            },
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/starred-repository"
                        }
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/repository"
                        }
                      }
                    ]
                  },
                  "examples": {
                    "default-response": {
                      "$ref": "#/components/examples/repository-items-default-response"
                    }
                  }
                }
              },
              "headers": {
                "Link": {
                  "$ref": "#/components/headers/link"
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "activity",
            "subcategory": "starring"
          }
        }
      },
      "/users/{username}/attestations/bulk-list": {
        "post": {
          "summary": "List attestations by bulk subject digests",
          "description": "List a collection of artifact attestations associated with any entry in a list of subject digests owned by a user.\n\nThe collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.\n\n**Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).",
          "tags": [
            "users"
          ],
          "operationId": "users/list-attestations-bulk",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/users/attestations#list-attestations-by-bulk-subject-digests"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/per-page"
            },
            {
              "$ref": "#/components/parameters/pagination-before"
            },
            {
              "$ref": "#/components/parameters/pagination-after"
            },
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subject_digests": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of subject digests to fetch attestations for.",
                      "minItems": 1,
                      "maxItems": 1024
                    },
                    "predicate_type": {
                      "type": "string",
                      "description": "Optional filter for fetching attestations with a given predicate type.\nThis option accepts `provenance`, `sbom`, or freeform text for custom predicate types."
                    }
                  },
                  "required": [
                    "subject_digests"
                  ]
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/bulk-subject-digest-body"
                  },
                  "withPredicateType": {
                    "$ref": "#/components/examples/bulk-subject-digest-body-with-predicate-type"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "attestations_subject_digests": {
                        "type": "object",
                        "additionalProperties": {
                          "nullable": true,
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "bundle": {
                                "type": "object",
                                "properties": {
                                  "mediaType": {
                                    "type": "string"
                                  },
                                  "verificationMaterial": {
                                    "type": "object",
                                    "properties": {},
                                    "additionalProperties": true
                                  },
                                  "dsseEnvelope": {
                                    "type": "object",
                                    "properties": {},
                                    "additionalProperties": true
                                  }
                                },
                                "description": "The bundle of the attestation."
                              },
                              "repository_id": {
                                "type": "integer"
                              },
                              "bundle_url": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "description": "Mapping of subject digest to bundles."
                      },
                      "page_info": {
                        "type": "object",
                        "properties": {
                          "has_next": {
                            "type": "boolean",
                            "description": "Indicates whether there is a next page."
                          },
                          "has_previous": {
                            "type": "boolean",
                            "description": "Indicates whether there is a previous page."
                          },
                          "next": {
                            "type": "string",
                            "description": "The cursor to the next page."
                          },
                          "previous": {
                            "type": "string",
                            "description": "The cursor to the previous page."
                          }
                        },
                        "description": "Information about the current page."
                      }
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/list-attestations-bulk"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": true,
            "category": "users",
            "subcategory": "attestations"
          }
        }
      },
      "/users/{username}/packages/{package_type}/{package_name}/versions": {
        "get": {
          "summary": "List package versions for a package owned by a user",
          "description": "Lists package versions for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\"",
          "tags": [
            "packages"
          ],
          "operationId": "packages/get-all-package-versions-for-package-owned-by-user",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/package-type"
            },
            {
              "$ref": "#/components/parameters/package-name"
            },
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/package-version"
                    }
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/package-versions-for-user"
                    }
                  }
                }
              }
            },
            "404": {
              "$ref": "#/components/responses/not_found"
            },
            "403": {
              "$ref": "#/components/responses/forbidden"
            },
            "401": {
              "$ref": "#/components/responses/requires_authentication"
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "packages",
            "subcategory": "packages"
          }
        }
      },
      "/users/{username}/settings/billing/shared-storage": {
        "get": {
          "summary": "Get shared storage billing for a user",
          "description": "Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.",
          "operationId": "billing/get-shared-storage-billing-user",
          "tags": [
            "billing"
          ],
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/rest/billing/billing#get-shared-storage-billing-for-a-user"
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/username"
            }
          ],
          "responses": {
            "200": {
              "description": "Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/combined-billing-usage"
                  },
                  "examples": {
                    "default": {
                      "$ref": "#/components/examples/combined-billing-usage"
                    }
                  }
                }
              }
            }
          },
          "x-github": {
            "githubCloudOnly": false,
            "enabledForGitHubApps": false,
            "category": "billing",
            "subcategory": "billing"
          }
        }
      }
    },
    "components": {
      "schemas": {
        "social-account": {
          "title": "Social account",
          "description": "Social media account",
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "example": "linkedin"
            },
            "url": {
              "type": "string",
              "example": "https://www.linkedin.com/company/github/"
            }
          },
          "required": [
            "provider",
            "url"
          ]
        },
        "minimal-repository": {
          "title": "Minimal Repository",
          "description": "Minimal Repository",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 1296269
            },
            "node_id": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            },
            "name": {
              "type": "string",
              "example": "Hello-World"
            },
            "full_name": {
              "type": "string",
              "example": "octocat/Hello-World"
            },
            "owner": {
              "$ref": "#/components/schemas/simple-user"
            },
            "private": {
              "type": "boolean"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat/Hello-World"
            },
            "description": {
              "type": "string",
              "example": "This your first repo!",
              "nullable": true
            },
            "fork": {
              "type": "boolean"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World"
            },
            "archive_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
            },
            "assignees_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
            },
            "blobs_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
            },
            "branches_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
            },
            "collaborators_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
            },
            "comments_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
            },
            "commits_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
            },
            "compare_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
            },
            "contents_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
            },
            "contributors_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
            },
            "deployments_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
            },
            "downloads_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
            },
            "events_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/events"
            },
            "forks_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/forks"
            },
            "git_commits_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
            },
            "git_refs_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
            },
            "git_tags_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
            },
            "git_url": {
              "type": "string"
            },
            "issue_comment_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
            },
            "issue_events_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
            },
            "issues_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
            },
            "keys_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
            },
            "labels_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
            },
            "languages_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/languages"
            },
            "merges_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/merges"
            },
            "milestones_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
            },
            "notifications_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
            },
            "pulls_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
            },
            "releases_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
            },
            "ssh_url": {
              "type": "string"
            },
            "stargazers_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
            },
            "statuses_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
            },
            "subscribers_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
            },
            "subscription_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
            },
            "tags_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/tags"
            },
            "teams_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/teams"
            },
            "trees_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            },
            "clone_url": {
              "type": "string"
            },
            "mirror_url": {
              "type": "string",
              "nullable": true
            },
            "hooks_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
            },
            "svn_url": {
              "type": "string"
            },
            "homepage": {
              "type": "string",
              "nullable": true
            },
            "language": {
              "type": "string",
              "nullable": true
            },
            "forks_count": {
              "type": "integer"
            },
            "stargazers_count": {
              "type": "integer"
            },
            "watchers_count": {
              "type": "integer"
            },
            "size": {
              "description": "The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
              "type": "integer"
            },
            "default_branch": {
              "type": "string"
            },
            "open_issues_count": {
              "type": "integer"
            },
            "is_template": {
              "type": "boolean"
            },
            "topics": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "has_issues": {
              "type": "boolean"
            },
            "has_projects": {
              "type": "boolean"
            },
            "has_wiki": {
              "type": "boolean"
            },
            "has_pages": {
              "type": "boolean"
            },
            "has_downloads": {
              "type": "boolean"
            },
            "has_discussions": {
              "type": "boolean"
            },
            "archived": {
              "type": "boolean"
            },
            "disabled": {
              "type": "boolean"
            },
            "visibility": {
              "type": "string"
            },
            "pushed_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:06:43Z",
              "nullable": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:01:12Z",
              "nullable": true
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:14:43Z",
              "nullable": true
            },
            "permissions": {
              "type": "object",
              "properties": {
                "admin": {
                  "type": "boolean"
                },
                "maintain": {
                  "type": "boolean"
                },
                "push": {
                  "type": "boolean"
                },
                "triage": {
                  "type": "boolean"
                },
                "pull": {
                  "type": "boolean"
                }
              }
            },
            "role_name": {
              "type": "string",
              "example": "admin"
            },
            "temp_clone_token": {
              "type": "string"
            },
            "delete_branch_on_merge": {
              "type": "boolean"
            },
            "subscribers_count": {
              "type": "integer"
            },
            "network_count": {
              "type": "integer"
            },
            "code_of_conduct": {
              "$ref": "#/components/schemas/code-of-conduct"
            },
            "license": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "spdx_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                }
              },
              "nullable": true
            },
            "forks": {
              "type": "integer",
              "example": 0
            },
            "open_issues": {
              "type": "integer",
              "example": 0
            },
            "watchers": {
              "type": "integer",
              "example": 0
            },
            "allow_forking": {
              "type": "boolean"
            },
            "web_commit_signoff_required": {
              "type": "boolean",
              "example": false
            },
            "security_and_analysis": {
              "$ref": "#/components/schemas/security-and-analysis"
            },
            "custom_properties": {
              "type": "object",
              "description": "The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
              "additionalProperties": true
            }
          },
          "required": [
            "archive_url",
            "assignees_url",
            "blobs_url",
            "branches_url",
            "collaborators_url",
            "comments_url",
            "commits_url",
            "compare_url",
            "contents_url",
            "contributors_url",
            "deployments_url",
            "description",
            "downloads_url",
            "events_url",
            "fork",
            "forks_url",
            "full_name",
            "git_commits_url",
            "git_refs_url",
            "git_tags_url",
            "hooks_url",
            "html_url",
            "id",
            "node_id",
            "issue_comment_url",
            "issue_events_url",
            "issues_url",
            "keys_url",
            "labels_url",
            "languages_url",
            "merges_url",
            "milestones_url",
            "name",
            "notifications_url",
            "owner",
            "private",
            "pulls_url",
            "releases_url",
            "stargazers_url",
            "statuses_url",
            "subscribers_url",
            "subscription_url",
            "tags_url",
            "teams_url",
            "trees_url",
            "url"
          ]
        },
        "enterprise": {
          "title": "Enterprise",
          "description": "An enterprise on GitHub.",
          "type": "object",
          "properties": {
            "description": {
              "description": "A short description of the enterprise.",
              "type": "string",
              "nullable": true
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/enterprises/octo-business"
            },
            "website_url": {
              "description": "The enterprise's website URL.",
              "type": "string",
              "nullable": true,
              "format": "uri"
            },
            "id": {
              "description": "Unique identifier of the enterprise",
              "example": 42,
              "type": "integer"
            },
            "node_id": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            },
            "name": {
              "description": "The name of the enterprise.",
              "type": "string",
              "example": "Octo Business"
            },
            "slug": {
              "description": "The slug url identifier for the enterprise.",
              "type": "string",
              "example": "octo-business"
            },
            "created_at": {
              "type": "string",
              "nullable": true,
              "format": "date-time",
              "example": "2019-01-26T19:01:12Z"
            },
            "updated_at": {
              "type": "string",
              "nullable": true,
              "format": "date-time",
              "example": "2019-01-26T19:14:43Z"
            },
            "avatar_url": {
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "id",
            "node_id",
            "name",
            "slug",
            "html_url",
            "created_at",
            "updated_at",
            "avatar_url"
          ]
        },
        "project": {
          "title": "Project",
          "description": "Projects are a way to organize columns and cards of work.",
          "type": "object",
          "properties": {
            "owner_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/api-playground/projects-test"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/projects/1002604"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/api-playground/projects-test/projects/12"
            },
            "columns_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/projects/1002604/columns"
            },
            "id": {
              "type": "integer",
              "example": 1002604
            },
            "node_id": {
              "type": "string",
              "example": "MDc6UHJvamVjdDEwMDI2MDQ="
            },
            "name": {
              "description": "Name of the project",
              "example": "Week One Sprint",
              "type": "string"
            },
            "body": {
              "description": "Body of the project",
              "example": "This project represents the sprint of the first week in January",
              "type": "string",
              "nullable": true
            },
            "number": {
              "type": "integer",
              "example": 1
            },
            "state": {
              "description": "State of the project; either 'open' or 'closed'",
              "example": "open",
              "type": "string"
            },
            "creator": {
              "$ref": "#/components/schemas/nullable-simple-user"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-04-10T20:09:31Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "example": "2014-03-03T18:58:10Z"
            },
            "organization_permission": {
              "description": "The baseline permission that all organization members have on this project. Only present if owner is an organization.",
              "type": "string",
              "enum": [
                "read",
                "write",
                "admin",
                "none"
              ]
            },
            "private": {
              "description": "Whether or not this project can be seen by everyone. Only present if owner is an organization.",
              "type": "boolean"
            }
          },
          "required": [
            "id",
            "node_id",
            "number",
            "name",
            "body",
            "state",
            "url",
            "html_url",
            "owner_url",
            "creator",
            "columns_url",
            "created_at",
            "updated_at"
          ]
        },
        "base-gist": {
          "title": "Base Gist",
          "description": "Base Gist",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "format": "uri"
            },
            "forks_url": {
              "type": "string",
              "format": "uri"
            },
            "commits_url": {
              "type": "string",
              "format": "uri"
            },
            "id": {
              "type": "string"
            },
            "node_id": {
              "type": "string"
            },
            "git_pull_url": {
              "type": "string",
              "format": "uri"
            },
            "git_push_url": {
              "type": "string",
              "format": "uri"
            },
            "html_url": {
              "type": "string",
              "format": "uri"
            },
            "files": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "language": {
                    "type": "string"
                  },
                  "raw_url": {
                    "type": "string"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "encoding": {
                    "type": "string",
                    "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
                    "default": "utf-8"
                  }
                }
              }
            },
            "public": {
              "type": "boolean"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "comments": {
              "type": "integer"
            },
            "comments_enabled": {
              "type": "boolean"
            },
            "user": {
              "$ref": "#/components/schemas/nullable-simple-user"
            },
            "comments_url": {
              "type": "string",
              "format": "uri"
            },
            "owner": {
              "$ref": "#/components/schemas/simple-user"
            },
            "truncated": {
              "type": "boolean"
            },
            "forks": {
              "type": "array",
              "items": {}
            },
            "history": {
              "type": "array",
              "items": {}
            }
          },
          "required": [
            "id",
            "node_id",
            "url",
            "forks_url",
            "commits_url",
            "git_pull_url",
            "git_push_url",
            "html_url",
            "comments_url",
            "public",
            "description",
            "comments",
            "user",
            "files",
            "created_at",
            "updated_at"
          ]
        },
        "repository": {
          "title": "Repository",
          "description": "A repository on GitHub.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the repository",
              "example": 42,
              "type": "integer",
              "format": "int64"
            },
            "node_id": {
              "type": "string",
              "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
            },
            "name": {
              "description": "The name of the repository.",
              "type": "string",
              "example": "Team Environment"
            },
            "full_name": {
              "type": "string",
              "example": "octocat/Hello-World"
            },
            "license": {
              "$ref": "#/components/schemas/nullable-license-simple"
            },
            "forks": {
              "type": "integer"
            },
            "permissions": {
              "type": "object",
              "properties": {
                "admin": {
                  "type": "boolean"
                },
                "pull": {
                  "type": "boolean"
                },
                "triage": {
                  "type": "boolean"
                },
                "push": {
                  "type": "boolean"
                },
                "maintain": {
                  "type": "boolean"
                }
              },
              "required": [
                "admin",
                "pull",
                "push"
              ]
            },
            "owner": {
              "$ref": "#/components/schemas/simple-user"
            },
            "private": {
              "description": "Whether the repository is private or public.",
              "default": false,
              "type": "boolean"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat/Hello-World"
            },
            "description": {
              "type": "string",
              "example": "This your first repo!",
              "nullable": true
            },
            "fork": {
              "type": "boolean"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/repos/octocat/Hello-World"
            },
            "archive_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
            },
            "assignees_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
            },
            "blobs_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
            },
            "branches_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
            },
            "collaborators_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
            },
            "comments_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
            },
            "commits_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
            },
            "compare_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
            },
            "contents_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
            },
            "contributors_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
            },
            "deployments_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
            },
            "downloads_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
            },
            "events_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/events"
            },
            "forks_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/forks"
            },
            "git_commits_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
            },
            "git_refs_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
            },
            "git_tags_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
            },
            "git_url": {
              "type": "string",
              "example": "git:github.com/octocat/Hello-World.git"
            },
            "issue_comment_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
            },
            "issue_events_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
            },
            "issues_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
            },
            "keys_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
            },
            "labels_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
            },
            "languages_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/languages"
            },
            "merges_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/merges"
            },
            "milestones_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
            },
            "notifications_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
            },
            "pulls_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
            },
            "releases_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
            },
            "ssh_url": {
              "type": "string",
              "example": "git@github.com:octocat/Hello-World.git"
            },
            "stargazers_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
            },
            "statuses_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
            },
            "subscribers_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
            },
            "subscription_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
            },
            "tags_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/tags"
            },
            "teams_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/teams"
            },
            "trees_url": {
              "type": "string",
              "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            },
            "clone_url": {
              "type": "string",
              "example": "https://github.com/octocat/Hello-World.git"
            },
            "mirror_url": {
              "type": "string",
              "format": "uri",
              "example": "git:git.example.com/octocat/Hello-World",
              "nullable": true
            },
            "hooks_url": {
              "type": "string",
              "format": "uri",
              "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
            },
            "svn_url": {
              "type": "string",
              "format": "uri",
              "example": "https://svn.github.com/octocat/Hello-World"
            },
            "homepage": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com",
              "nullable": true
            },
            "language": {
              "type": "string",
              "nullable": true
            },
            "forks_count": {
              "type": "integer",
              "example": 9
            },
            "stargazers_count": {
              "type": "integer",
              "example": 80
            },
            "watchers_count": {
              "type": "integer",
              "example": 80
            },
            "size": {
              "description": "The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
              "type": "integer",
              "example": 108
            },
            "default_branch": {
              "description": "The default branch of the repository.",
              "type": "string",
              "example": "master"
            },
            "open_issues_count": {
              "type": "integer",
              "example": 0
            },
            "is_template": {
              "description": "Whether this repository acts as a template that can be used to generate new repositories.",
              "default": false,
              "type": "boolean",
              "example": true
            },
            "topics": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "has_issues": {
              "description": "Whether issues are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            },
            "has_projects": {
              "description": "Whether projects are enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            },
            "has_wiki": {
              "description": "Whether the wiki is enabled.",
              "default": true,
              "type": "boolean",
              "example": true
            },
            "has_pages": {
              "type": "boolean"
            },
            "has_downloads": {
              "description": "Whether downloads are enabled.",
              "default": true,
              "type": "boolean",
              "example": true,
              "deprecated": true
            },
            "has_discussions": {
              "description": "Whether discussions are enabled.",
              "default": false,
              "type": "boolean",
              "example": true
            },
            "archived": {
              "description": "Whether the repository is archived.",
              "default": false,
              "type": "boolean"
            },
            "disabled": {
              "type": "boolean",
              "description": "Returns whether or not this repository disabled."
            },
            "visibility": {
              "description": "The repository visibility: public, private, or internal.",
              "default": "public",
              "type": "string"
            },
            "pushed_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:06:43Z",
              "nullable": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:01:12Z",
              "nullable": true
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-01-26T19:14:43Z",
              "nullable": true
            },
            "allow_rebase_merge": {
              "description": "Whether to allow rebase merges for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            },
            "temp_clone_token": {
              "type": "string"
            },
            "allow_squash_merge": {
              "description": "Whether to allow squash merges for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            },
            "allow_auto_merge": {
              "description": "Whether to allow Auto-merge to be used on pull requests.",
              "default": false,
              "type": "boolean",
              "example": false
            },
            "delete_branch_on_merge": {
              "description": "Whether to delete head branches when pull requests are merged",
              "default": false,
              "type": "boolean",
              "example": false
            },
            "allow_update_branch": {
              "description": "Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
              "default": false,
              "type": "boolean",
              "example": false
            },
            "use_squash_pr_title_as_default": {
              "type": "boolean",
              "description": "Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.",
              "default": false,
              "deprecated": true
            },
            "squash_merge_commit_title": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "COMMIT_OR_PR_TITLE"
              ],
              "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
            },
            "squash_merge_commit_message": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "COMMIT_MESSAGES",
                "BLANK"
              ],
              "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
            },
            "merge_commit_title": {
              "type": "string",
              "enum": [
                "PR_TITLE",
                "MERGE_MESSAGE"
              ],
              "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
            },
            "merge_commit_message": {
              "type": "string",
              "enum": [
                "PR_BODY",
                "PR_TITLE",
                "BLANK"
              ],
              "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
            },
            "allow_merge_commit": {
              "description": "Whether to allow merge commits for pull requests.",
              "default": true,
              "type": "boolean",
              "example": true
            },
            "allow_forking": {
              "description": "Whether to allow forking this repo",
              "type": "boolean"
            },
            "web_commit_signoff_required": {
              "description": "Whether to require contributors to sign off on web-based commits",
              "default": false,
              "type": "boolean"
            },
            "open_issues": {
              "type": "integer"
            },
            "watchers": {
              "type": "integer"
            },
            "master_branch": {
              "type": "string"
            },
            "starred_at": {
              "type": "string",
              "example": "\"2020-07-09T00:17:42Z\""
            },
            "anonymous_access_enabled": {
              "type": "boolean",
              "description": "Whether anonymous git access is enabled for this repository"
            },
            "code_search_index_status": {
              "type": "object",
              "description": "The status of the code search index for this repository",
              "properties": {
                "lexical_search_ok": {
                  "type": "boolean"
                },
                "lexical_commit_sha": {
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "archive_url",
            "assignees_url",
            "blobs_url",
            "branches_url",
            "collaborators_url",
            "comments_url",
            "commits_url",
            "compare_url",
            "contents_url",
            "contributors_url",
            "deployments_url",
            "description",
            "downloads_url",
            "events_url",
            "fork",
            "forks_url",
            "full_name",
            "git_commits_url",
            "git_refs_url",
            "git_tags_url",
            "hooks_url",
            "html_url",
            "id",
            "node_id",
            "issue_comment_url",
            "issue_events_url",
            "issues_url",
            "keys_url",
            "labels_url",
            "languages_url",
            "merges_url",
            "milestones_url",
            "name",
            "notifications_url",
            "owner",
            "private",
            "pulls_url",
            "releases_url",
            "stargazers_url",
            "statuses_url",
            "subscribers_url",
            "subscription_url",
            "tags_url",
            "teams_url",
            "trees_url",
            "url",
            "clone_url",
            "default_branch",
            "forks",
            "forks_count",
            "git_url",
            "has_downloads",
            "has_issues",
            "has_projects",
            "has_wiki",
            "has_pages",
            "homepage",
            "language",
            "archived",
            "disabled",
            "mirror_url",
            "open_issues",
            "open_issues_count",
            "license",
            "pushed_at",
            "size",
            "ssh_url",
            "stargazers_count",
            "svn_url",
            "watchers",
            "watchers_count",
            "created_at",
            "updated_at"
          ]
        },
        "hovercard": {
          "title": "Hovercard",
          "description": "Hovercard",
          "type": "object",
          "properties": {
            "contexts": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "octicon": {
                    "type": "string"
                  }
                },
                "required": [
                  "message",
                  "octicon"
                ]
              }
            }
          },
          "required": [
            "contexts"
          ]
        },
        "nullable-license-simple": {
          "title": "License Simple",
          "description": "License Simple",
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "example": "mit"
            },
            "name": {
              "type": "string",
              "example": "MIT License"
            },
            "url": {
              "type": "string",
              "nullable": true,
              "format": "uri",
              "example": "https://api.github.com/licenses/mit"
            },
            "spdx_id": {
              "type": "string",
              "nullable": true,
              "example": "MIT"
            },
            "node_id": {
              "type": "string",
              "example": "MDc6TGljZW5zZW1pdA=="
            },
            "html_url": {
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "key",
            "name",
            "url",
            "spdx_id",
            "node_id"
          ],
          "nullable": true
        },
        "app-permissions": {
          "title": "App Permissions",
          "type": "object",
          "description": "The permissions granted to the user access token.",
          "properties": {
            "actions": {
              "type": "string",
              "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
              "enum": [
                "read",
                "write"
              ]
            },
            "administration": {
              "type": "string",
              "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
              "enum": [
                "read",
                "write"
              ]
            },
            "checks": {
              "type": "string",
              "description": "The level of permission to grant the access token for checks on code.",
              "enum": [
                "read",
                "write"
              ]
            },
            "codespaces": {
              "type": "string",
              "description": "The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
              "enum": [
                "read",
                "write"
              ]
            },
            "contents": {
              "type": "string",
              "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
              "enum": [
                "read",
                "write"
              ]
            },
            "dependabot_secrets": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage Dependabot secrets.",
              "enum": [
                "read",
                "write"
              ]
            },
            "deployments": {
              "type": "string",
              "description": "The level of permission to grant the access token for deployments and deployment statuses.",
              "enum": [
                "read",
                "write"
              ]
            },
            "environments": {
              "type": "string",
              "description": "The level of permission to grant the access token for managing repository environments.",
              "enum": [
                "read",
                "write"
              ]
            },
            "issues": {
              "type": "string",
              "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
              "enum": [
                "read",
                "write"
              ]
            },
            "metadata": {
              "type": "string",
              "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
              "enum": [
                "read",
                "write"
              ]
            },
            "packages": {
              "type": "string",
              "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
              "enum": [
                "read",
                "write"
              ]
            },
            "pages": {
              "type": "string",
              "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
              "enum": [
                "read",
                "write"
              ]
            },
            "pull_requests": {
              "type": "string",
              "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
              "enum": [
                "read",
                "write"
              ]
            },
            "repository_custom_properties": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
              "enum": [
                "read",
                "write"
              ]
            },
            "repository_hooks": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
              "enum": [
                "read",
                "write"
              ]
            },
            "repository_projects": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
              "enum": [
                "read",
                "write",
                "admin"
              ]
            },
            "secret_scanning_alerts": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
              "enum": [
                "read",
                "write"
              ]
            },
            "secrets": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage repository secrets.",
              "enum": [
                "read",
                "write"
              ]
            },
            "security_events": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
              "enum": [
                "read",
                "write"
              ]
            },
            "single_file": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage just a single file.",
              "enum": [
                "read",
                "write"
              ]
            },
            "statuses": {
              "type": "string",
              "description": "The level of permission to grant the access token for commit statuses.",
              "enum": [
                "read",
                "write"
              ]
            },
            "vulnerability_alerts": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage Dependabot alerts.",
              "enum": [
                "read",
                "write"
              ]
            },
            "workflows": {
              "type": "string",
              "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
              "enum": [
                "write"
              ]
            },
            "members": {
              "type": "string",
              "description": "The level of permission to grant the access token for organization teams and members.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_administration": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage access to an organization.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_custom_roles": {
              "type": "string",
              "description": "The level of permission to grant the access token for custom repository roles management.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_custom_org_roles": {
              "type": "string",
              "description": "The level of permission to grant the access token for custom organization roles management.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_custom_properties": {
              "type": "string",
              "description": "The level of permission to grant the access token for custom property management.",
              "enum": [
                "read",
                "write",
                "admin"
              ]
            },
            "organization_copilot_seat_management": {
              "type": "string",
              "description": "The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.",
              "enum": [
                "write"
              ]
            },
            "organization_announcement_banners": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage announcement banners for an organization.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_events": {
              "type": "string",
              "description": "The level of permission to grant the access token to view events triggered by an activity in an organization.",
              "enum": [
                "read"
              ]
            },
            "organization_hooks": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_personal_access_tokens": {
              "type": "string",
              "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_personal_access_token_requests": {
              "type": "string",
              "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_plan": {
              "type": "string",
              "description": "The level of permission to grant the access token for viewing an organization's plan.",
              "enum": [
                "read"
              ]
            },
            "organization_projects": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage organization projects and projects public preview (where available).",
              "enum": [
                "read",
                "write",
                "admin"
              ]
            },
            "organization_packages": {
              "type": "string",
              "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_secrets": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage organization secrets.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_self_hosted_runners": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
              "enum": [
                "read",
                "write"
              ]
            },
            "organization_user_blocking": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
              "enum": [
                "read",
                "write"
              ]
            },
            "team_discussions": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage team discussions and related comments.",
              "enum": [
                "read",
                "write"
              ]
            },
            "email_addresses": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage the email addresses belonging to a user.",
              "enum": [
                "read",
                "write"
              ]
            },
            "followers": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage the followers belonging to a user.",
              "enum": [
                "read",
                "write"
              ]
            },
            "git_ssh_keys": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage git SSH keys.",
              "enum": [
                "read",
                "write"
              ]
            },
            "gpg_keys": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
              "enum": [
                "read",
                "write"
              ]
            },
            "interaction_limits": {
              "type": "string",
              "description": "The level of permission to grant the access token to view and manage interaction limits on a repository.",
              "enum": [
                "read",
                "write"
              ]
            },
            "profile": {
              "type": "string",
              "description": "The level of permission to grant the access token to manage the profile settings belonging to a user.",
              "enum": [
                "write"
              ]
            },
            "starring": {
              "type": "string",
              "description": "The level of permission to grant the access token to list and manage repositories a user is starring.",
              "enum": [
                "read",
                "write"
              ]
            }
          },
          "example": {
            "contents": "read",
            "issues": "read",
            "deployments": "write",
            "single_file": "read"
          }
        },
        "nullable-simple-user": {
          "title": "Simple User",
          "description": "A GitHub user.",
          "type": "object",
          "properties": {
            "name": {
              "nullable": true,
              "type": "string"
            },
            "email": {
              "nullable": true,
              "type": "string"
            },
            "login": {
              "type": "string",
              "example": "octocat"
            },
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "node_id": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            },
            "avatar_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            },
            "gravatar_id": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            },
            "followers_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            },
            "following_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            },
            "gists_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            },
            "starred_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            },
            "subscriptions_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            },
            "organizations_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            },
            "repos_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            },
            "events_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            },
            "received_events_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            },
            "type": {
              "type": "string",
              "example": "User"
            },
            "site_admin": {
              "type": "boolean"
            },
            "starred_at": {
              "type": "string",
              "example": "\"2020-07-09T00:17:55Z\""
            },
            "user_view_type": {
              "type": "string",
              "example": "public"
            }
          },
          "required": [
            "avatar_url",
            "events_url",
            "followers_url",
            "following_url",
            "gists_url",
            "gravatar_id",
            "html_url",
            "id",
            "node_id",
            "login",
            "organizations_url",
            "received_events_url",
            "repos_url",
            "site_admin",
            "starred_url",
            "subscriptions_url",
            "type",
            "url"
          ],
          "nullable": true
        },
        "installation": {
          "title": "Installation",
          "description": "Installation",
          "type": "object",
          "properties": {
            "id": {
              "description": "The ID of the installation.",
              "type": "integer",
              "example": 1
            },
            "account": {
              "nullable": true,
              "anyOf": [
                {
                  "$ref": "#/components/schemas/simple-user"
                },
                {
                  "$ref": "#/components/schemas/enterprise"
                }
              ]
            },
            "repository_selection": {
              "description": "Describe whether all repositories have been selected or there's a selection involved",
              "type": "string",
              "enum": [
                "all",
                "selected"
              ]
            },
            "access_tokens_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/app/installations/1/access_tokens"
            },
            "repositories_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/installation/repositories"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/organizations/github/settings/installations/1"
            },
            "app_id": {
              "type": "integer",
              "example": 1
            },
            "client_id": {
              "type": "string",
              "example": "Iv1.ab1112223334445c"
            },
            "target_id": {
              "description": "The ID of the user or organization this token is being scoped to.",
              "type": "integer"
            },
            "target_type": {
              "type": "string",
              "example": "Organization"
            },
            "permissions": {
              "$ref": "#/components/schemas/app-permissions"
            },
            "events": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "single_file_name": {
              "type": "string",
              "example": "config.yaml",
              "nullable": true
            },
            "has_multiple_single_files": {
              "type": "boolean",
              "example": true
            },
            "single_file_paths": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ]
            },
            "app_slug": {
              "type": "string",
              "example": "github-actions"
            },
            "suspended_by": {
              "$ref": "#/components/schemas/nullable-simple-user"
            },
            "suspended_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "contact_email": {
              "type": "string",
              "example": "\"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com\"",
              "nullable": true
            }
          },
          "required": [
            "id",
            "app_id",
            "app_slug",
            "target_id",
            "target_type",
            "single_file_name",
            "repository_selection",
            "access_tokens_url",
            "html_url",
            "repositories_url",
            "events",
            "account",
            "permissions",
            "created_at",
            "updated_at",
            "suspended_by",
            "suspended_at"
          ]
        },
        "starred-repository": {
          "title": "Starred Repository",
          "description": "Starred Repository",
          "type": "object",
          "properties": {
            "starred_at": {
              "type": "string",
              "format": "date-time"
            },
            "repo": {
              "$ref": "#/components/schemas/repository"
            }
          },
          "required": [
            "starred_at",
            "repo"
          ]
        },
        "combined-billing-usage": {
          "type": "object",
          "properties": {
            "days_left_in_billing_cycle": {
              "type": "integer",
              "description": "Numbers of days left in billing cycle."
            },
            "estimated_paid_storage_for_month": {
              "type": "integer",
              "description": "Estimated storage space (GB) used in billing cycle."
            },
            "estimated_storage_for_month": {
              "type": "integer",
              "description": "Estimated sum of free and paid storage space (GB) used in billing cycle."
            }
          },
          "required": [
            "days_left_in_billing_cycle",
            "estimated_paid_storage_for_month",
            "estimated_storage_for_month"
          ]
        },
        "event": {
          "description": "The event that triggered the delivery.",
          "type": "string",
          "example": "issues"
        },
        "organization-simple": {
          "title": "Organization Simple",
          "description": "A GitHub organization.",
          "type": "object",
          "properties": {
            "login": {
              "type": "string",
              "example": "github"
            },
            "id": {
              "type": "integer",
              "example": 1
            },
            "node_id": {
              "type": "string",
              "example": "MDEyOk9yZ2FuaXphdGlvbjE="
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github"
            },
            "repos_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/repos"
            },
            "events_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/orgs/github/events"
            },
            "hooks_url": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/hooks"
            },
            "issues_url": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/issues"
            },
            "members_url": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/members{/member}"
            },
            "public_members_url": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/public_members{/member}"
            },
            "avatar_url": {
              "type": "string",
              "example": "https://github.com/images/error/octocat_happy.gif"
            },
            "description": {
              "type": "string",
              "example": "A great organization",
              "nullable": true
            }
          },
          "required": [
            "login",
            "url",
            "id",
            "node_id",
            "repos_url",
            "events_url",
            "hooks_url",
            "issues_url",
            "members_url",
            "public_members_url",
            "avatar_url",
            "description"
          ]
        },
        "package-version": {
          "title": "Package Version",
          "description": "A version of a software package",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the package version.",
              "type": "integer",
              "example": 1
            },
            "name": {
              "description": "The name of the package version.",
              "type": "string",
              "example": "latest"
            },
            "url": {
              "type": "string",
              "example": "https://api.github.com/orgs/github/packages/container/super-linter/versions/786068"
            },
            "package_html_url": {
              "type": "string",
              "example": "https://github.com/orgs/github/packages/container/package/super-linter"
            },
            "html_url": {
              "type": "string",
              "example": "https://github.com/orgs/github/packages/container/super-linter/786068"
            },
            "license": {
              "type": "string",
              "example": "MIT"
            },
            "description": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2011-04-10T20:09:31Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "example": "2014-03-03T18:58:10Z"
            },
            "deleted_at": {
              "type": "string",
              "format": "date-time",
              "example": "2014-03-03T18:58:10Z"
            },
            "metadata": {
              "type": "object",
              "title": "Package Version Metadata",
              "properties": {
                "package_type": {
                  "type": "string",
                  "example": "docker",
                  "enum": [
                    "npm",
                    "maven",
                    "rubygems",
                    "docker",
                    "nuget",
                    "container"
                  ]
                },
                "container": {
                  "type": "object",
                  "title": "Container Metadata",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "tags"
                  ]
                },
                "docker": {
                  "type": "object",
                  "title": "Docker Metadata",
                  "properties": {
                    "tag": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "tags"
                  ]
                }
              },
              "required": [
                "package_type"
              ]
            }
          },
          "required": [
            "id",
            "name",
            "url",
            "package_html_url",
            "created_at",
            "updated_at"
          ]
        },
        "security-and-analysis": {
          "nullable": true,
          "type": "object",
          "properties": {
            "advanced_security": {
              "description": "Enable or disable GitHub Advanced Security for the repository.\n\nFor standalone Code Scanning or Secret Protection products, this parameter cannot be used.\n",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            },
            "code_security": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            },
            "dependabot_security_updates": {
              "description": "Enable or disable Dependabot security updates for the repository.",
              "type": "object",
              "properties": {
                "status": {
                  "description": "The enablement status of Dependabot security updates for the repository.",
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            },
            "secret_scanning": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            },
            "secret_scanning_push_protection": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            },
            "secret_scanning_non_provider_patterns": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            },
            "secret_scanning_ai_detection": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "enabled",
                    "disabled"
                  ]
                }
              }
            }
          }
        },
        "ssh-signing-key": {
          "title": "SSH Signing Key",
          "description": "A public SSH key used to sign Git commits",
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "key",
            "id",
            "title",
            "created_at"
          ]
        },
        "package": {
          "description": "The name of the package affected by the vulnerability.",
          "type": "object",
          "nullable": true,
          "properties": {
            "ecosystem": {
              "$ref": "#/components/schemas/security-advisory-ecosystems"
            },
            "name": {
              "type": "string",
              "description": "The unique package name within its ecosystem.",
              "nullable": true
            }
          },
          "required": [
            "ecosystem",
            "name"
          ]
        },
        "actions-billing-usage": {
          "type": "object",
          "properties": {
            "total_minutes_used": {
              "type": "integer",
              "description": "The sum of the free and paid GitHub Actions minutes used."
            },
            "total_paid_minutes_used": {
              "type": "integer",
              "description": "The total paid GitHub Actions minutes used."
            },
            "included_minutes": {
              "type": "integer",
              "description": "The amount of free GitHub Actions minutes available."
            },
            "minutes_used_breakdown": {
              "type": "object",
              "properties": {
                "UBUNTU": {
                  "type": "integer",
                  "description": "Total minutes used on Ubuntu runner machines."
                },
                "MACOS": {
                  "type": "integer",
                  "description": "Total minutes used on macOS runner machines."
                },
                "WINDOWS": {
                  "type": "integer",
                  "description": "Total minutes used on Windows runner machines."
                },
                "ubuntu_4_core": {
                  "type": "integer",
                  "description": "Total minutes used on Ubuntu 4 core runner machines."
                },
                "ubuntu_8_core": {
                  "type": "integer",
                  "description": "Total minutes used on Ubuntu 8 core runner machines."
                },
                "ubuntu_16_core": {
                  "type": "integer",
                  "description": "Total minutes used on Ubuntu 16 core runner machines."
                },
                "ubuntu_32_core": {
                  "type": "integer",
                  "description": "Total minutes used on Ubuntu 32 core runner machines."
                },
                "ubuntu_64_core": {
                  "type": "integer",
                  "description": "Total minutes used on Ubuntu 64 core runner machines."
                },
                "windows_4_core": {
                  "type": "integer",
                  "description": "Total minutes used on Windows 4 core runner machines."
                },
                "windows_8_core": {
                  "type": "integer",
                  "description": "Total minutes used on Windows 8 core runner machines."
                },
                "windows_16_core": {
                  "type": "integer",
                  "description": "Total minutes used on Windows 16 core runner machines."
                },
                "windows_32_core": {
                  "type": "integer",
                  "description": "Total minutes used on Windows 32 core runner machines."
                },
                "windows_64_core": {
                  "type": "integer",
                  "description": "Total minutes used on Windows 64 core runner machines."
                },
                "macos_12_core": {
                  "type": "integer",
                  "description": "Total minutes used on macOS 12 core runner machines."
                },
                "total": {
                  "type": "integer",
                  "description": "Total minutes used on all runner machines."
                }
              }
            }
          },
          "required": [
            "total_minutes_used",
            "total_paid_minutes_used",
            "included_minutes",
            "minutes_used_breakdown"
          ]
        },
        "simple-user": {
          "title": "Simple User",
          "description": "A GitHub user.",
          "type": "object",
          "properties": {
            "name": {
              "nullable": true,
              "type": "string"
            },
            "email": {
              "nullable": true,
              "type": "string"
            },
            "login": {
              "type": "string",
              "example": "octocat"
            },
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "node_id": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            },
            "avatar_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            },
            "gravatar_id": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            },
            "followers_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            },
            "following_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            },
            "gists_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            },
            "starred_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            },
            "subscriptions_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            },
            "organizations_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            },
            "repos_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            },
            "events_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            },
            "received_events_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            },
            "type": {
              "type": "string",
              "example": "User"
            },
            "site_admin": {
              "type": "boolean"
            },
            "starred_at": {
              "type": "string",
              "example": "\"2020-07-09T00:17:55Z\""
            },
            "user_view_type": {
              "type": "string",
              "example": "public"
            }
          },
          "required": [
            "avatar_url",
            "events_url",
            "followers_url",
            "following_url",
            "gists_url",
            "gravatar_id",
            "html_url",
            "id",
            "node_id",
            "login",
            "organizations_url",
            "received_events_url",
            "repos_url",
            "site_admin",
            "starred_url",
            "subscriptions_url",
            "type",
            "url"
          ]
        },
        "security-advisory-ecosystems": {
          "type": "string",
          "description": "The package's language or package management ecosystem.",
          "enum": [
            "rubygems",
            "npm",
            "pip",
            "maven",
            "nuget",
            "composer",
            "go",
            "rust",
            "erlang",
            "actions",
            "pub",
            "other",
            "swift"
          ]
        },
        "key-simple": {
          "title": "Key Simple",
          "description": "Key Simple",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "key": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "last_used": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "key",
            "id"
          ]
        },
        "public-user": {
          "title": "Public User",
          "description": "Public User",
          "type": "object",
          "properties": {
            "login": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "user_view_type": {
              "type": "string"
            },
            "node_id": {
              "type": "string"
            },
            "avatar_url": {
              "type": "string",
              "format": "uri"
            },
            "gravatar_id": {
              "type": "string",
              "nullable": true
            },
            "url": {
              "type": "string",
              "format": "uri"
            },
            "html_url": {
              "type": "string",
              "format": "uri"
            },
            "followers_url": {
              "type": "string",
              "format": "uri"
            },
            "following_url": {
              "type": "string"
            },
            "gists_url": {
              "type": "string"
            },
            "starred_url": {
              "type": "string"
            },
            "subscriptions_url": {
              "type": "string",
              "format": "uri"
            },
            "organizations_url": {
              "type": "string",
              "format": "uri"
            },
            "repos_url": {
              "type": "string",
              "format": "uri"
            },
            "events_url": {
              "type": "string"
            },
            "received_events_url": {
              "type": "string",
              "format": "uri"
            },
            "type": {
              "type": "string"
            },
            "site_admin": {
              "type": "boolean"
            },
            "name": {
              "type": "string",
              "nullable": true
            },
            "company": {
              "type": "string",
              "nullable": true
            },
            "blog": {
              "type": "string",
              "nullable": true
            },
            "location": {
              "type": "string",
              "nullable": true
            },
            "email": {
              "type": "string",
              "format": "email",
              "nullable": true
            },
            "notification_email": {
              "type": "string",
              "format": "email",
              "nullable": true
            },
            "hireable": {
              "type": "boolean",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "nullable": true
            },
            "twitter_username": {
              "type": "string",
              "nullable": true
            },
            "public_repos": {
              "type": "integer"
            },
            "public_gists": {
              "type": "integer"
            },
            "followers": {
              "type": "integer"
            },
            "following": {
              "type": "integer"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "plan": {
              "type": "object",
              "properties": {
                "collaborators": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "space": {
                  "type": "integer"
                },
                "private_repos": {
                  "type": "integer"
                }
              },
              "required": [
                "collaborators",
                "name",
                "space",
                "private_repos"
              ]
            },
            "private_gists": {
              "type": "integer",
              "example": 1
            },
            "total_private_repos": {
              "type": "integer",
              "example": 2
            },
            "owned_private_repos": {
              "type": "integer",
              "example": 2
            },
            "disk_usage": {
              "type": "integer",
              "example": 1
            },
            "collaborators": {
              "type": "integer",
              "example": 3
            }
          },
          "required": [
            "avatar_url",
            "events_url",
            "followers_url",
            "following_url",
            "gists_url",
            "gravatar_id",
            "html_url",
            "id",
            "node_id",
            "login",
            "organizations_url",
            "received_events_url",
            "repos_url",
            "site_admin",
            "starred_url",
            "subscriptions_url",
            "type",
            "url",
            "bio",
            "blog",
            "company",
            "email",
            "followers",
            "following",
            "hireable",
            "location",
            "name",
            "public_gists",
            "public_repos",
            "created_at",
            "updated_at"
          ],
          "additionalProperties": false
        },
        "code-of-conduct": {
          "title": "Code Of Conduct",
          "description": "Code Of Conduct",
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "example": "contributor_covenant"
            },
            "name": {
              "type": "string",
              "example": "Contributor Covenant"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/codes_of_conduct/contributor_covenant"
            },
            "body": {
              "type": "string",
              "example": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).\n"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "nullable": true
            }
          },
          "required": [
            "url",
            "html_url",
            "key",
            "name"
          ]
        },
        "gpg-key": {
          "title": "GPG Key",
          "description": "A unique encryption key",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 3
            },
            "name": {
              "type": "string",
              "example": "Octocat's GPG Key",
              "nullable": true
            },
            "primary_key_id": {
              "type": "integer",
              "nullable": true
            },
            "key_id": {
              "type": "string",
              "example": "3262EFF25BA0D270"
            },
            "public_key": {
              "type": "string",
              "example": "xsBNBFayYZ..."
            },
            "emails": {
              "type": "array",
              "example": [
                {
                  "email": "octocat@users.noreply.github.com",
                  "verified": true
                }
              ],
              "items": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  }
                }
              }
            },
            "subkeys": {
              "type": "array",
              "example": [
                {
                  "id": 4,
                  "primary_key_id": 3,
                  "key_id": "4A595D4C72EE49C7",
                  "public_key": "zsBNBFayYZ...",
                  "emails": [],
                  "can_sign": false,
                  "can_encrypt_comms": true,
                  "can_encrypt_storage": true,
                  "can_certify": false,
                  "created_at": "2016-03-24T11:31:04-06:00",
                  "expires_at": null,
                  "revoked": false
                }
              ],
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "primary_key_id": {
                    "type": "integer"
                  },
                  "key_id": {
                    "type": "string"
                  },
                  "public_key": {
                    "type": "string"
                  },
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "verified": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "subkeys": {
                    "type": "array",
                    "items": {}
                  },
                  "can_sign": {
                    "type": "boolean"
                  },
                  "can_encrypt_comms": {
                    "type": "boolean"
                  },
                  "can_encrypt_storage": {
                    "type": "boolean"
                  },
                  "can_certify": {
                    "type": "boolean"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "nullable": true
                  },
                  "raw_key": {
                    "type": "string",
                    "nullable": true
                  },
                  "revoked": {
                    "type": "boolean"
                  }
                }
              }
            },
            "can_sign": {
              "type": "boolean",
              "example": true
            },
            "can_encrypt_comms": {
              "type": "boolean"
            },
            "can_encrypt_storage": {
              "type": "boolean"
            },
            "can_certify": {
              "type": "boolean",
              "example": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2016-03-24T11:31:04-06:00"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "revoked": {
              "type": "boolean",
              "example": true
            },
            "raw_key": {
              "type": "string",
              "nullable": true
            }
          },
          "required": [
            "id",
            "primary_key_id",
            "key_id",
            "raw_key",
            "public_key",
            "created_at",
            "expires_at",
            "can_sign",
            "can_encrypt_comms",
            "can_encrypt_storage",
            "can_certify",
            "emails",
            "subkeys",
            "revoked"
          ]
        },
        "packages-billing-usage": {
          "type": "object",
          "properties": {
            "total_gigabytes_bandwidth_used": {
              "type": "integer",
              "description": "Sum of the free and paid storage space (GB) for GitHuub Packages."
            },
            "total_paid_gigabytes_bandwidth_used": {
              "type": "integer",
              "description": "Total paid storage space (GB) for GitHuub Packages."
            },
            "included_gigabytes_bandwidth": {
              "type": "integer",
              "description": "Free storage space (GB) for GitHub Packages."
            }
          },
          "required": [
            "total_gigabytes_bandwidth_used",
            "total_paid_gigabytes_bandwidth_used",
            "included_gigabytes_bandwidth"
          ]
        },
        "private-user": {
          "title": "Private User",
          "description": "Private User",
          "type": "object",
          "properties": {
            "login": {
              "type": "string",
              "example": "octocat"
            },
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "user_view_type": {
              "type": "string"
            },
            "node_id": {
              "type": "string",
              "example": "MDQ6VXNlcjE="
            },
            "avatar_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/images/error/octocat_happy.gif"
            },
            "gravatar_id": {
              "type": "string",
              "example": "41d064eb2195891e12d0413f63227ea7",
              "nullable": true
            },
            "url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat"
            },
            "html_url": {
              "type": "string",
              "format": "uri",
              "example": "https://github.com/octocat"
            },
            "followers_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/followers"
            },
            "following_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/following{/other_user}"
            },
            "gists_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/gists{/gist_id}"
            },
            "starred_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
            },
            "subscriptions_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/subscriptions"
            },
            "organizations_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/orgs"
            },
            "repos_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/repos"
            },
            "events_url": {
              "type": "string",
              "example": "https://api.github.com/users/octocat/events{/privacy}"
            },
            "received_events_url": {
              "type": "string",
              "format": "uri",
              "example": "https://api.github.com/users/octocat/received_events"
            },
            "type": {
              "type": "string",
              "example": "User"
            },
            "site_admin": {
              "type": "boolean"
            },
            "name": {
              "type": "string",
              "example": "monalisa octocat",
              "nullable": true
            },
            "company": {
              "type": "string",
              "example": "GitHub",
              "nullable": true
            },
            "blog": {
              "type": "string",
              "example": "https://github.com/blog",
              "nullable": true
            },
            "location": {
              "type": "string",
              "example": "San Francisco",
              "nullable": true
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "octocat@github.com",
              "nullable": true
            },
            "notification_email": {
              "type": "string",
              "format": "email",
              "example": "octocat@github.com",
              "nullable": true
            },
            "hireable": {
              "type": "boolean",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "example": "There once was...",
              "nullable": true
            },
            "twitter_username": {
              "type": "string",
              "example": "monalisa",
              "nullable": true
            },
            "public_repos": {
              "type": "integer",
              "example": 2
            },
            "public_gists": {
              "type": "integer",
              "example": 1
            },
            "followers": {
              "type": "integer",
              "example": 20
            },
            "following": {
              "type": "integer",
              "example": 0
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2008-01-14T04:33:35Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "example": "2008-01-14T04:33:35Z"
            },
            "private_gists": {
              "type": "integer",
              "example": 81
            },
            "total_private_repos": {
              "type": "integer",
              "example": 100
            },
            "owned_private_repos": {
              "type": "integer",
              "example": 100
            },
            "disk_usage": {
              "type": "integer",
              "example": 10000
            },
            "collaborators": {
              "type": "integer",
              "example": 8
            },
            "two_factor_authentication": {
              "type": "boolean",
              "example": true
            },
            "plan": {
              "type": "object",
              "properties": {
                "collaborators": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "space": {
                  "type": "integer"
                },
                "private_repos": {
                  "type": "integer"
                }
              },
              "required": [
                "collaborators",
                "name",
                "space",
                "private_repos"
              ]
            },
            "business_plus": {
              "type": "boolean"
            },
            "ldap_dn": {
              "type": "string"
            }
          },
          "required": [
            "avatar_url",
            "events_url",
            "followers_url",
            "following_url",
            "gists_url",
            "gravatar_id",
            "html_url",
            "id",
            "node_id",
            "login",
            "organizations_url",
            "received_events_url",
            "repos_url",
            "site_admin",
            "starred_url",
            "subscriptions_url",
            "type",
            "url",
            "bio",
            "blog",
            "company",
            "email",
            "followers",
            "following",
            "hireable",
            "location",
            "name",
            "public_gists",
            "public_repos",
            "created_at",
            "updated_at",
            "collaborators",
            "disk_usage",
            "owned_private_repos",
            "private_gists",
            "total_private_repos",
            "two_factor_authentication"
          ]
        },
        "empty-object": {
          "title": "Empty Object",
          "description": "An object without any properties.",
          "type": "object",
          "properties": {},
          "additionalProperties": false
        }
      },
      "examples": {
        "social-account-items": {
          "value": [
            {
              "provider": "twitter",
              "url": "https://twitter.com/github"
            }
          ]
        },
        "ssh-signing-key-items": {
          "value": [
            {
              "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
              "id": 2,
              "url": "https://api.github.com/user/keys/2",
              "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
              "created_at": "2020-06-11T21:31:57Z"
            },
            {
              "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJy931234",
              "id": 3,
              "url": "https://api.github.com/user/keys/3",
              "title": "ssh-rsa AAAAB3NzaC1yc2EAAB",
              "created_at": "2020-07-11T21:31:57Z"
            }
          ]
        },
        "key-simple-items": {
          "value": [
            {
              "id": 1,
              "key": "ssh-rsa AAA..."
            }
          ]
        },
        "gpg-key-items": {
          "value": [
            {
              "id": 3,
              "name": "Octocat's GPG Key",
              "primary_key_id": 2,
              "key_id": "3262EFF25BA0D270",
              "public_key": "xsBNBFayYZ...",
              "emails": [
                {
                  "email": "octocat@users.noreply.github.com",
                  "verified": true
                }
              ],
              "subkeys": [
                {
                  "id": 4,
                  "primary_key_id": 3,
                  "key_id": "4A595D4C72EE49C7",
                  "public_key": "zsBNBFayYZ...",
                  "emails": [],
                  "can_sign": false,
                  "can_encrypt_comms": true,
                  "can_encrypt_storage": true,
                  "can_certify": false,
                  "created_at": "2016-03-24T11:31:04-06:00",
                  "expires_at": "2016-03-24T11:31:04-07:00",
                  "revoked": false
                }
              ],
              "can_sign": true,
              "can_encrypt_comms": false,
              "can_encrypt_storage": false,
              "can_certify": true,
              "created_at": "2016-03-24T11:31:04-06:00",
              "expires_at": "2016-03-24T11:31:04-07:00",
              "revoked": false,
              "raw_key": "string"
            }
          ]
        },
        "package-versions-for-user": {
          "value": [
            {
              "id": 3497268,
              "name": "0.3.0",
              "url": "https://api.github.com/users/octocat/packages/rubygems/octo-name/versions/3497268",
              "package_html_url": "https://github.com/octocat/octo-name-repo/packages/40201",
              "license": "MIT",
              "created_at": "2020-08-31T15:22:11Z",
              "updated_at": "2020-08-31T15:22:12Z",
              "description": "Project for octocats",
              "html_url": "https://github.com/octocat/octo-name-repo/packages/40201?version=0.3.0",
              "metadata": {
                "package_type": "rubygems"
              }
            },
            {
              "id": 387039,
              "name": "0.2.0",
              "url": "https://api.github.com/users/octocat/packages/rubygems/octo-name/versions/387039",
              "package_html_url": "https://github.com/octocat/octo-name-repo/packages/40201",
              "license": "MIT",
              "created_at": "2019-12-01T20:49:29Z",
              "updated_at": "2019-12-01T20:49:30Z",
              "description": "Project for octocats",
              "html_url": "https://github.com/octocat/octo-name-repo/packages/40201?version=0.2.0",
              "metadata": {
                "package_type": "rubygems"
              }
            },
            {
              "id": 169770,
              "name": "0.1.0",
              "url": "https://api.github.com/users/octocat/packages/rubygems/octo-name/versions/169770",
              "package_html_url": "https://github.com/octocat/octo-name-repo/packages/40201",
              "license": "MIT",
              "created_at": "2019-10-20T14:17:14Z",
              "updated_at": "2019-10-20T14:17:15Z",
              "html_url": "https://github.com/octocat/octo-name-repo/packages/40201?version=0.1.0",
              "metadata": {
                "package_type": "rubygems"
              }
            }
          ]
        },
        "package-version-user": {
          "value": {
            "id": 387039,
            "name": "0.2.0",
            "url": "https://api.github.com/users/octocat/packages/rubygems/octo-name/versions/387039",
            "package_html_url": "https://github.com/octocat/octo-name-repo/packages/40201",
            "license": "MIT",
            "created_at": "2019-12-01T20:49:29Z",
            "updated_at": "2019-12-01T20:49:30Z",
            "description": "Octo-name client for Ruby",
            "html_url": "https://github.com/octocat/octo-name-repo/packages/40201?version=0.2.0",
            "metadata": {
              "package_type": "rubygems"
            }
          }
        },
        "repository-items-default-response": {
          "summary": "Default response",
          "value": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ]
        },
        "project-items-3": {
          "value": [
            {
              "owner_url": "https://api.github.com/users/octocat",
              "url": "https://api.github.com/projects/1002603",
              "html_url": "https://github.com/users/octocat/projects/1",
              "columns_url": "https://api.github.com/projects/1002603/columns",
              "id": 1002603,
              "node_id": "MDc6UHJvamVjdDEwMDI2MDM=",
              "name": "My Projects",
              "body": "A board to manage my personal projects.",
              "number": 1,
              "state": "open",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z"
            }
          ]
        },
        "user-received-events-items": {
          "value": [
            {
              "id": "22249084964",
              "type": "PushEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "push_id": 10115855396,
                "size": 1,
                "distinct_size": 1,
                "ref": "refs/heads/master",
                "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                "before": "883efe034920928c47fe18598c01249d1a9fdabd",
                "commits": [
                  {
                    "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                    "author": {
                      "email": "octocat@github.com",
                      "name": "Monalisa Octocat"
                    },
                    "message": "commit",
                    "distinct": true,
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                  }
                ]
              },
              "public": true,
              "created_at": "2022-06-09T12:47:28Z"
            },
            {
              "id": "22196946742",
              "type": "CreateEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "ref": null,
                "ref_type": "repository",
                "master_branch": "master",
                "description": null,
                "pusher_type": "user"
              },
              "public": false,
              "created_at": "2022-06-07T07:50:26Z",
              "org": {
                "id": 9919,
                "login": "github",
                "gravatar_id": "",
                "url": "https://api.github.com/orgs/github",
                "avatar_url": "https://avatars.githubusercontent.com/u/9919?"
              }
            }
          ]
        },
        "hovercard": {
          "value": {
            "contexts": [
              {
                "message": "Owns this repository",
                "octicon": "repo"
              }
            ]
          }
        },
        "bulk-subject-digest-body": {
          "value": {
            "subject_digests": [
              "sha256:abc123",
              "sha512:def456"
            ]
          }
        },
        "list-attestations": {
          "value": {
            "attestations": [
              {
                "bundle": {
                  "mediaType": "application/vnd.dev.sigstore.bundle.v0.3+json",
                  "verificationMaterial": {
                    "tlogEntries": [
                      {
                        "logIndex": "97913980",
                        "logId": {
                          "keyId": "wNI9atQGlz+VWfO6LRygH4QUfY/8W4RFwiT5i5WRgB0="
                        },
                        "kindVersion": {
                          "kind": "dsse",
                          "version": "0.0.1"
                        },
                        "integratedTime": "1716998992",
                        "inclusionPromise": {
                          "signedEntryTimestamp": "MEYCIQCeEsQAy+qXtULkh52wbnHrkt2R2JQ05P9STK/xmdpQ2AIhANiG5Gw6cQiMnwvUz1+9UKtG/vlC8dduq07wsFOViwSL"
                        },
                        "inclusionProof": {
                          "logIndex": "93750549",
                          "rootHash": "KgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=",
                          "treeSize": "93750551",
                          "hashes": [
                            "8LI21mzwxnUSo0fuZeFsUrz2ujZ4QAL+oGeTG+5toZg=",
                            "nCb369rcIytNhGwWoqBv+eV49X3ZKpo/HJGKm9V+dck=",
                            "hnNQ9mUdSwYCfdV21pd87NucrdRRNZATowlaRR1hJ4A=",
                            "MBhhK33vlD4Tq/JKgAaXUI4VjmosWKe6+7RNpQ2ncNM=",
                            "XKWUE3stvGV1OHsIGiCGfn047Ok6uD4mFkh7BaicaEc=",
                            "Tgve40VPFfuei+0nhupdGpfPPR+hPpZjxgTiDT8WNoY=",
                            "wV+S/7tLtYGzkLaSb6UDqexNyhMvumHK/RpTNvEZuLU=",
                            "uwaWufty6sn6XqO1Tb9M3Vz6sBKPu0HT36mStxJNd7s=",
                            "jUfeMOXQP0XF1JAnCEETVbfRKMUwCzrVUzYi8vnDMVs=",
                            "xQKjzJAwwdlQG/YUYBKPXxbCmhMYKo1wnv+6vDuKWhQ=",
                            "cX3Agx+hP66t1ZLbX/yHbfjU46/3m/VAmWyG/fhxAVc=",
                            "sjohk/3DQIfXTgf/5XpwtdF7yNbrf8YykOMHr1CyBYQ=",
                            "98enzMaC+x5oCMvIZQA5z8vu2apDMCFvE/935NfuPw8="
                          ],
                          "checkpoint": {
                            "envelope": "rekor.sigstore.dev - 2605736670972794746\\n93750551\\nKgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=\\n\\n— rekor.sigstore.dev wNI9ajBEAiBkLzdjY8A9HReU7rmtjwZ+JpSuYtEr9SmvSwUIW7FBjgIgKo+vhkW3tqc+gc8fw9gza3xLoncA8a+MTaJYCaLGA9c=\\n"
                          }
                        },
                        "canonicalizedBody": "eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiZHNzZSIsInNwZWMiOnsiZW52ZWxvcGVIYXNoIjp7ImFsZ29yaXRobSI6InNoYTI1NiIsInZhbHVlIjoiM2I1YzkwNDk5MGFiYzE4NjI1ZWE3Njg4MzE1OGEwZmI4MTEwMjM4MGJkNjQwZjI5OWJlMzYwZWVkOTMxNjYwYiJ9LCJwYXlsb2FkSGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6IjM4ZGNlZDJjMzE1MGU2OTQxMDViYjZiNDNjYjY3NzBiZTYzZDdhNGM4NjNiMTc2YTkwMmU1MGQ5ZTAyN2ZiMjMifSwic2lnbmF0dXJlcyI6W3sic2lnbmF0dXJlIjoiTUVRQ0lFR0lHQW03Z1pWTExwc3JQY2puZEVqaXVjdEUyL2M5K2o5S0d2YXp6M3JsQWlBZDZPMTZUNWhrelJNM0liUlB6bSt4VDQwbU5RWnhlZmQ3bGFEUDZ4MlhMUT09IiwidmVyaWZpZXIiOiJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VkcVZFTkRRbWhUWjBGM1NVSkJaMGxWVjFsNGNVdHpjazFUTTFOMmJEVkphalZQUkdaQ1owMUtUeTlKZDBObldVbExiMXBKZW1vd1JVRjNUWGNLVG5wRlZrMUNUVWRCTVZWRlEyaE5UV015Ykc1ak0xSjJZMjFWZFZwSFZqSk5ValIzU0VGWlJGWlJVVVJGZUZaNllWZGtlbVJIT1hsYVV6RndZbTVTYkFwamJURnNXa2RzYUdSSFZYZElhR05PVFdwUmQwNVVTVFZOVkZsM1QxUlZlVmRvWTA1TmFsRjNUbFJKTlUxVVdYaFBWRlY1VjJwQlFVMUdhM2RGZDFsSUNrdHZXa2w2YWpCRFFWRlpTVXR2V2tsNmFqQkVRVkZqUkZGblFVVmtiV2RvVGs1M00yNVZMMHQxWlZGbmMzQkhTRmMzWjJnNVdFeEVMMWRrU1RoWlRVSUtLekJ3TUZZMGJ6RnJTRzgyWTAweGMwUktaM0pEWjFCUlZYcDRjSFZaZFc4cmVIZFFTSGxzTDJ0RWVXWXpSVXhxYTJGUFEwSlVUWGRuWjFWMlRVRTBSd3BCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVkVKblRsWklVMVZGUkVSQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVdSQ1owNVdTRkUwUlVablVWVnhaa05RQ25aWVMwRjJVelJEWkdoUk1taGlXbGRLVTA5RmRsWnZkMGgzV1VSV1VqQnFRa0puZDBadlFWVXpPVkJ3ZWpGWmEwVmFZalZ4VG1wd1MwWlhhWGhwTkZrS1drUTRkMWRuV1VSV1VqQlNRVkZJTDBKR1FYZFViMXBOWVVoU01HTklUVFpNZVRsdVlWaFNiMlJYU1hWWk1qbDBUREpPYzJGVE9XcGlSMnQyVEcxa2NBcGtSMmd4V1drNU0ySXpTbkphYlhoMlpETk5kbHBIVm5kaVJ6azFZbGRXZFdSRE5UVmlWM2hCWTIxV2JXTjVPVzlhVjBaclkzazVNR051Vm5WaGVrRTFDa0puYjNKQ1owVkZRVmxQTDAxQlJVSkNRM1J2WkVoU2QyTjZiM1pNTTFKMllUSldkVXh0Um1wa1IyeDJZbTVOZFZveWJEQmhTRlpwWkZoT2JHTnRUbllLWW01U2JHSnVVWFZaTWpsMFRVSTRSME5wYzBkQlVWRkNaemM0ZDBGUlNVVkZXR1IyWTIxMGJXSkhPVE5ZTWxKd1l6TkNhR1JIVG05TlJGbEhRMmx6UndwQlVWRkNaemM0ZDBGUlRVVkxSMXBvV2xkWmVWcEhVbXRQUkVacFRVUmplazVxWXpCUFJGRjRUVEpGTTFsNldUQk9iVTVyVFVkS2JWbDZTVEpaZWtGM0NsbFVRWGRIUVZsTFMzZFpRa0pCUjBSMmVrRkNRa0ZSUzFKSFZuZGlSemsxWWxkV2RXUkVRVlpDWjI5eVFtZEZSVUZaVHk5TlFVVkdRa0ZrYW1KSGEzWUtXVEo0Y0UxQ05FZERhWE5IUVZGUlFtYzNPSGRCVVZsRlJVaEtiRnB1VFhaaFIxWm9Xa2hOZG1SSVNqRmliWE4zVDNkWlMwdDNXVUpDUVVkRWRucEJRZ3BEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVk1iVVpxWkVkc2RtSnVUWFZhTW13d1lVaFdhV1JZVG14amJVNTJZbTVTYkdKdVVYVlpNamwwQ2sxR2QwZERhWE5IUVZGUlFtYzNPSGRCVVd0RlZHZDRUV0ZJVWpCalNFMDJUSGs1Ym1GWVVtOWtWMGwxV1RJNWRFd3lUbk5oVXpscVlrZHJka3h0WkhBS1pFZG9NVmxwT1ROaU0wcHlXbTE0ZG1RelRYWmFSMVozWWtjNU5XSlhWblZrUXpVMVlsZDRRV050Vm0xamVUbHZXbGRHYTJONU9UQmpibFoxWVhwQk5BcENaMjl5UW1kRlJVRlpUeTlOUVVWTFFrTnZUVXRIV21oYVYxbDVXa2RTYTA5RVJtbE5SR042VG1wak1FOUVVWGhOTWtVeldYcFpNRTV0VG10TlIwcHRDbGw2U1RKWmVrRjNXVlJCZDBoUldVdExkMWxDUWtGSFJIWjZRVUpEZDFGUVJFRXhibUZZVW05a1YwbDBZVWM1ZW1SSFZtdE5RMjlIUTJselIwRlJVVUlLWnpjNGQwRlJkMFZJUVhkaFlVaFNNR05JVFRaTWVUbHVZVmhTYjJSWFNYVlpNamwwVERKT2MyRlRPV3BpUjJ0M1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWdwRVVWRnhSRU5vYlZsWFZtMU5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBGSENrTnBjMGRCVVZGQ1p6YzRkMEZSTkVWRlozZFJZMjFXYldONU9XOWFWMFpyWTNrNU1HTnVWblZoZWtGYVFtZHZja0puUlVWQldVOHZUVUZGVUVKQmMwMEtRMVJKZUUxcVdYaE5la0V3VDFSQmJVSm5iM0pDWjBWRlFWbFBMMDFCUlZGQ1FtZE5SbTFvTUdSSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhZ3BpUjJ0M1IwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWUlVVdEVRV2N4VDFSamQwNUVZM2hOVkVKalFtZHZja0puUlVWQldVOHZUVUZGVTBKRk5FMVVSMmd3Q21SSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhbUpIYTNaWk1uaHdUSGsxYm1GWVVtOWtWMGwyWkRJNWVXRXlXbk5pTTJSNlRESlNiR05IZUhZS1pWY3hiR0p1VVhWbFZ6RnpVVWhLYkZwdVRYWmhSMVpvV2toTmRtUklTakZpYlhOM1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWM1VYRkVRMmh0V1ZkV2JRcE5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBWSFEybHpSMEZSVVVKbk56aDNDa0ZTVVVWRmQzZFNaREk1ZVdFeVduTmlNMlJtV2tkc2VtTkhSakJaTW1kM1ZGRlpTMHQzV1VKQ1FVZEVkbnBCUWtaUlVTOUVSREZ2WkVoU2QyTjZiM1lLVERKa2NHUkhhREZaYVRWcVlqSXdkbGt5ZUhCTU1rNXpZVk01YUZrelVuQmlNalY2VEROS01XSnVUWFpQVkVrMFQxUkJNMDVVWXpGTmFUbG9aRWhTYkFwaVdFSXdZM2s0ZUUxQ1dVZERhWE5IUVZGUlFtYzNPSGRCVWxsRlEwRjNSMk5JVm1saVIyeHFUVWxIVEVKbmIzSkNaMFZGUVdSYU5VRm5VVU5DU0RCRkNtVjNRalZCU0dOQk0xUXdkMkZ6WWtoRlZFcHFSMUkwWTIxWFl6TkJjVXBMV0hKcVpWQkxNeTlvTkhCNVowTTRjRGR2TkVGQlFVZFFlRkl4ZW1KblFVRUtRa0ZOUVZORVFrZEJhVVZCS3pobmJGRkplRTlCYUZoQ1FVOVRObE1yT0ZweGQwcGpaSGQzVTNJdlZGZHBhSE16WkV4eFZrRjJiME5KVVVSaWVUbG9NUXBKWTNWRVJYSXJlbk5YYVV3NFVIYzFRMU5VZEd0c2RFbzBNakZ6UlRneFZuWjFOa0Z3VkVGTFFtZG5jV2hyYWs5UVVWRkVRWGRPYmtGRVFtdEJha0VyQ2tSSU4xQXJhR2cwVmtoWFprTlhXSFJ5UzFSdlFrdDFZa0pyUzNCbVYwTlpVWGhxV0UweWRsWXZibEJ4WWxwR1dVOVdXazlpWlRaQlRuSm5lV1J2V1VNS1RVWlZUV0l6ZUhwelJrNVJXWFp6UlZsUGFUSkxibkoyUmpCMFoyOXdiVmhIVm05NmJsb3JjUzh5UVVsRVZ6bEdNVVUzV1RaWk1EWXhaVzkxUVZsa1NBcFhkejA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLIn1dfX0="
                      }
                    ],
                    "timestampVerificationData": {},
                    "certificate": {
                      "rawBytes": "MIIGjTCCBhSgAwIBAgIUWYxqKsrMS3Svl5Ij5ODfBgMJO/IwCgYIKoZIzj0EAwMwNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUwHhcNMjQwNTI5MTYwOTUyWhcNMjQwNTI5MTYxOTUyWjAAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdmghNNw3nU/KueQgspGHW7gh9XLD/WdI8YMB+0p0V4o1kHo6cM1sDJgrCgPQUzxpuYuo+xwPHyl/kDyf3ELjkaOCBTMwggUvMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUqfCPvXKAvS4CdhQ2hbZWJSOEvVowHwYDVR0jBBgwFoAU39Ppz1YkEZb5qNjpKFWixi4YZD8wWgYDVR0RAQH/BFAwToZMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA5BgorBgEEAYO/MAEBBCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMB8GCisGAQQBg78wAQIEEXdvcmtmbG93X2Rpc3BhdGNoMDYGCisGAQQBg78wAQMEKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwGAYKKwYBBAGDvzABBAQKRGVwbG95bWVudDAVBgorBgEEAYO/MAEFBAdjbGkvY2xpMB4GCisGAQQBg78wAQYEEHJlZnMvaGVhZHMvdHJ1bmswOwYKKwYBBAGDvzABCAQtDCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMFwGCisGAQQBg78wAQkETgxMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA4BgorBgEEAYO/MAEKBCoMKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwHQYKKwYBBAGDvzABCwQPDA1naXRodWItaG9zdGVkMCoGCisGAQQBg78wAQwEHAwaaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkwOAYKKwYBBAGDvzABDQQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCAGCisGAQQBg78wAQ4EEgwQcmVmcy9oZWFkcy90cnVuazAZBgorBgEEAYO/MAEPBAsMCTIxMjYxMzA0OTAmBgorBgEEAYO/MAEQBBgMFmh0dHBzOi8vZ2l0aHViLmNvbS9jbGkwGAYKKwYBBAGDvzABEQQKDAg1OTcwNDcxMTBcBgorBgEEAYO/MAESBE4MTGh0dHBzOi8vZ2l0aHViLmNvbS9jbGkvY2xpLy5naXRodWIvd29ya2Zsb3dzL2RlcGxveW1lbnQueW1sQHJlZnMvaGVhZHMvdHJ1bmswOAYKKwYBBAGDvzABEwQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCEGCisGAQQBg78wARQEEwwRd29ya2Zsb3dfZGlzcGF0Y2gwTQYKKwYBBAGDvzABFQQ/DD1odHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaS9hY3Rpb25zL3J1bnMvOTI4OTA3NTc1Mi9hdHRlbXB0cy8xMBYGCisGAQQBg78wARYECAwGcHVibGljMIGLBgorBgEEAdZ5AgQCBH0EewB5AHcA3T0wasbHETJjGR4cmWc3AqJKXrjePK3/h4pygC8p7o4AAAGPxR1zbgAABAMASDBGAiEA+8glQIxOAhXBAOS6S+8ZqwJcdwwSr/TWihs3dLqVAvoCIQDby9h1IcuDEr+zsWiL8Pw5CSTtkltJ421sE81Vvu6ApTAKBggqhkjOPQQDAwNnADBkAjA+DH7P+hh4VHWfCWXtrKToBKubBkKpfWCYQxjXM2vV/nPqbZFYOVZObe6ANrgydoYCMFUMb3xzsFNQYvsEYOi2KnrvF0tgopmXGVoznZ+q/2AIDW9F1E7Y6Y061eouAYdHWw=="
                    }
                  },
                  "dsseEnvelope": {
                    "payload": "eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiZ2hfMi41MC4wX3dpbmRvd3NfYXJtNjQuemlwIiwiZGlnZXN0Ijp7InNoYTI1NiI6IjhhYWQxMjBiNDE2Mzg2YjQyNjllZjYyYzhmZGViY2FkMzFhNzA4NDcyOTc4MTdhMTQ5ZGFmOTI3ZWRjODU1NDgifX1dLCJwcmVkaWNhdGVUeXBlIjoiaHR0cHM6Ly9zbHNhLmRldi9wcm92ZW5hbmNlL3YxIiwicHJlZGljYXRlIjp7ImJ1aWxkRGVmaW5pdGlvbiI6eyJidWlsZFR5cGUiOiJodHRwczovL3Nsc2EtZnJhbWV3b3JrLmdpdGh1Yi5pby9naXRodWItYWN0aW9ucy1idWlsZHR5cGVzL3dvcmtmbG93L3YxIiwiZXh0ZXJuYWxQYXJhbWV0ZXJzIjp7IndvcmtmbG93Ijp7InJlZiI6InJlZnMvaGVhZHMvdHJ1bmsiLCJyZXBvc2l0b3J5IjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkiLCJwYXRoIjoiLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWwifX0sImludGVybmFsUGFyYW1ldGVycyI6eyJnaXRodWIiOnsiZXZlbnRfbmFtZSI6IndvcmtmbG93X2Rpc3BhdGNoIiwicmVwb3NpdG9yeV9pZCI6IjIxMjYxMzA0OSIsInJlcG9zaXRvcnlfb3duZXJfaWQiOiI1OTcwNDcxMSJ9fSwicmVzb2x2ZWREZXBlbmRlbmNpZXMiOlt7InVyaSI6ImdpdCtodHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaUByZWZzL2hlYWRzL3RydW5rIiwiZGlnZXN0Ijp7ImdpdENvbW1pdCI6ImZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAifX1dfSwicnVuRGV0YWlscyI6eyJidWlsZGVyIjp7ImlkIjoiaHR0cHM6Ly9naXRodWIuY29tL2FjdGlvbnMvcnVubmVyL2dpdGh1Yi1ob3N0ZWQifSwibWV0YWRhdGEiOnsiaW52b2NhdGlvbklkIjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvYWN0aW9ucy9ydW5zLzkyODkwNzU3NTIvYXR0ZW1wdHMvMSJ9fX19",
                    "payloadType": "application/vnd.in-toto+json",
                    "signatures": [
                      {
                        "sig": "MEQCIEGIGAm7gZVLLpsrPcjndEjiuctE2/c9+j9KGvazz3rlAiAd6O16T5hkzRM3IbRPzm+xT40mNQZxefd7laDP6x2XLQ=="
                      }
                    ]
                  }
                },
                "repository_id": 1
              },
              {
                "bundle": {
                  "mediaType": "application/vnd.dev.sigstore.bundle.v0.3+json",
                  "verificationMaterial": {
                    "tlogEntries": [
                      {
                        "logIndex": "97913980",
                        "logId": {
                          "keyId": "wNI9atQGlz+VWfO6LRygH4QUfY/8W4RFwiT5i5WRgB0="
                        },
                        "kindVersion": {
                          "kind": "dsse",
                          "version": "0.0.1"
                        },
                        "integratedTime": "1716998992",
                        "inclusionPromise": {
                          "signedEntryTimestamp": "MEYCIQCeEsQAy+qXtULkh52wbnHrkt2R2JQ05P9STK/xmdpQ2AIhANiG5Gw6cQiMnwvUz1+9UKtG/vlC8dduq07wsFOViwSL"
                        },
                        "inclusionProof": {
                          "logIndex": "93750549",
                          "rootHash": "KgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=",
                          "treeSize": "93750551",
                          "hashes": [
                            "8LI21mzwxnUSo0fuZeFsUrz2ujZ4QAL+oGeTG+5toZg=",
                            "nCb369rcIytNhGwWoqBv+eV49X3ZKpo/HJGKm9V+dck=",
                            "hnNQ9mUdSwYCfdV21pd87NucrdRRNZATowlaRR1hJ4A=",
                            "MBhhK33vlD4Tq/JKgAaXUI4VjmosWKe6+7RNpQ2ncNM=",
                            "XKWUE3stvGV1OHsIGiCGfn047Ok6uD4mFkh7BaicaEc=",
                            "Tgve40VPFfuei+0nhupdGpfPPR+hPpZjxgTiDT8WNoY=",
                            "wV+S/7tLtYGzkLaSb6UDqexNyhMvumHK/RpTNvEZuLU=",
                            "uwaWufty6sn6XqO1Tb9M3Vz6sBKPu0HT36mStxJNd7s=",
                            "jUfeMOXQP0XF1JAnCEETVbfRKMUwCzrVUzYi8vnDMVs=",
                            "xQKjzJAwwdlQG/YUYBKPXxbCmhMYKo1wnv+6vDuKWhQ=",
                            "cX3Agx+hP66t1ZLbX/yHbfjU46/3m/VAmWyG/fhxAVc=",
                            "sjohk/3DQIfXTgf/5XpwtdF7yNbrf8YykOMHr1CyBYQ=",
                            "98enzMaC+x5oCMvIZQA5z8vu2apDMCFvE/935NfuPw8="
                          ],
                          "checkpoint": {
                            "envelope": "rekor.sigstore.dev - 2605736670972794746\\n93750551\\nKgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=\\n\\n— rekor.sigstore.dev wNI9ajBEAiBkLzdjY8A9HReU7rmtjwZ+JpSuYtEr9SmvSwUIW7FBjgIgKo+vhkW3tqc+gc8fw9gza3xLoncA8a+MTaJYCaLGA9c=\\n"
                          }
                        },
                        "canonicalizedBody": "eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiZHNzZSIsInNwZWMiOnsiZW52ZWxvcGVIYXNoIjp7ImFsZ29yaXRobSI6InNoYTI1NiIsInZhbHVlIjoiM2I1YzkwNDk5MGFiYzE4NjI1ZWE3Njg4MzE1OGEwZmI4MTEwMjM4MGJkNjQwZjI5OWJlMzYwZWVkOTMxNjYwYiJ9LCJwYXlsb2FkSGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6IjM4ZGNlZDJjMzE1MGU2OTQxMDViYjZiNDNjYjY3NzBiZTYzZDdhNGM4NjNiMTc2YTkwMmU1MGQ5ZTAyN2ZiMjMifSwic2lnbmF0dXJlcyI6W3sic2lnbmF0dXJlIjoiTUVRQ0lFR0lHQW03Z1pWTExwc3JQY2puZEVqaXVjdEUyL2M5K2o5S0d2YXp6M3JsQWlBZDZPMTZUNWhrelJNM0liUlB6bSt4VDQwbU5RWnhlZmQ3bGFEUDZ4MlhMUT09IiwidmVyaWZpZXIiOiJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VkcVZFTkRRbWhUWjBGM1NVSkJaMGxWVjFsNGNVdHpjazFUTTFOMmJEVkphalZQUkdaQ1owMUtUeTlKZDBObldVbExiMXBKZW1vd1JVRjNUWGNLVG5wRlZrMUNUVWRCTVZWRlEyaE5UV015Ykc1ak0xSjJZMjFWZFZwSFZqSk5ValIzU0VGWlJGWlJVVVJGZUZaNllWZGtlbVJIT1hsYVV6RndZbTVTYkFwamJURnNXa2RzYUdSSFZYZElhR05PVFdwUmQwNVVTVFZOVkZsM1QxUlZlVmRvWTA1TmFsRjNUbFJKTlUxVVdYaFBWRlY1VjJwQlFVMUdhM2RGZDFsSUNrdHZXa2w2YWpCRFFWRlpTVXR2V2tsNmFqQkVRVkZqUkZGblFVVmtiV2RvVGs1M00yNVZMMHQxWlZGbmMzQkhTRmMzWjJnNVdFeEVMMWRrU1RoWlRVSUtLekJ3TUZZMGJ6RnJTRzgyWTAweGMwUktaM0pEWjFCUlZYcDRjSFZaZFc4cmVIZFFTSGxzTDJ0RWVXWXpSVXhxYTJGUFEwSlVUWGRuWjFWMlRVRTBSd3BCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVkVKblRsWklVMVZGUkVSQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVdSQ1owNVdTRkUwUlVablVWVnhaa05RQ25aWVMwRjJVelJEWkdoUk1taGlXbGRLVTA5RmRsWnZkMGgzV1VSV1VqQnFRa0puZDBadlFWVXpPVkJ3ZWpGWmEwVmFZalZ4VG1wd1MwWlhhWGhwTkZrS1drUTRkMWRuV1VSV1VqQlNRVkZJTDBKR1FYZFViMXBOWVVoU01HTklUVFpNZVRsdVlWaFNiMlJYU1hWWk1qbDBUREpPYzJGVE9XcGlSMnQyVEcxa2NBcGtSMmd4V1drNU0ySXpTbkphYlhoMlpETk5kbHBIVm5kaVJ6azFZbGRXZFdSRE5UVmlWM2hCWTIxV2JXTjVPVzlhVjBaclkzazVNR051Vm5WaGVrRTFDa0puYjNKQ1owVkZRVmxQTDAxQlJVSkNRM1J2WkVoU2QyTjZiM1pNTTFKMllUSldkVXh0Um1wa1IyeDJZbTVOZFZveWJEQmhTRlpwWkZoT2JHTnRUbllLWW01U2JHSnVVWFZaTWpsMFRVSTRSME5wYzBkQlVWRkNaemM0ZDBGUlNVVkZXR1IyWTIxMGJXSkhPVE5ZTWxKd1l6TkNhR1JIVG05TlJGbEhRMmx6UndwQlVWRkNaemM0ZDBGUlRVVkxSMXBvV2xkWmVWcEhVbXRQUkVacFRVUmplazVxWXpCUFJGRjRUVEpGTTFsNldUQk9iVTVyVFVkS2JWbDZTVEpaZWtGM0NsbFVRWGRIUVZsTFMzZFpRa0pCUjBSMmVrRkNRa0ZSUzFKSFZuZGlSemsxWWxkV2RXUkVRVlpDWjI5eVFtZEZSVUZaVHk5TlFVVkdRa0ZrYW1KSGEzWUtXVEo0Y0UxQ05FZERhWE5IUVZGUlFtYzNPSGRCVVZsRlJVaEtiRnB1VFhaaFIxWm9Xa2hOZG1SSVNqRmliWE4zVDNkWlMwdDNXVUpDUVVkRWRucEJRZ3BEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVk1iVVpxWkVkc2RtSnVUWFZhTW13d1lVaFdhV1JZVG14amJVNTJZbTVTYkdKdVVYVlpNamwwQ2sxR2QwZERhWE5IUVZGUlFtYzNPSGRCVVd0RlZHZDRUV0ZJVWpCalNFMDJUSGs1Ym1GWVVtOWtWMGwxV1RJNWRFd3lUbk5oVXpscVlrZHJka3h0WkhBS1pFZG9NVmxwT1ROaU0wcHlXbTE0ZG1RelRYWmFSMVozWWtjNU5XSlhWblZrUXpVMVlsZDRRV050Vm0xamVUbHZXbGRHYTJONU9UQmpibFoxWVhwQk5BcENaMjl5UW1kRlJVRlpUeTlOUVVWTFFrTnZUVXRIV21oYVYxbDVXa2RTYTA5RVJtbE5SR042VG1wak1FOUVVWGhOTWtVeldYcFpNRTV0VG10TlIwcHRDbGw2U1RKWmVrRjNXVlJCZDBoUldVdExkMWxDUWtGSFJIWjZRVUpEZDFGUVJFRXhibUZZVW05a1YwbDBZVWM1ZW1SSFZtdE5RMjlIUTJselIwRlJVVUlLWnpjNGQwRlJkMFZJUVhkaFlVaFNNR05JVFRaTWVUbHVZVmhTYjJSWFNYVlpNamwwVERKT2MyRlRPV3BpUjJ0M1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWdwRVVWRnhSRU5vYlZsWFZtMU5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBGSENrTnBjMGRCVVZGQ1p6YzRkMEZSTkVWRlozZFJZMjFXYldONU9XOWFWMFpyWTNrNU1HTnVWblZoZWtGYVFtZHZja0puUlVWQldVOHZUVUZGVUVKQmMwMEtRMVJKZUUxcVdYaE5la0V3VDFSQmJVSm5iM0pDWjBWRlFWbFBMMDFCUlZGQ1FtZE5SbTFvTUdSSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhZ3BpUjJ0M1IwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWUlVVdEVRV2N4VDFSamQwNUVZM2hOVkVKalFtZHZja0puUlVWQldVOHZUVUZGVTBKRk5FMVVSMmd3Q21SSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhbUpIYTNaWk1uaHdUSGsxYm1GWVVtOWtWMGwyWkRJNWVXRXlXbk5pTTJSNlRESlNiR05IZUhZS1pWY3hiR0p1VVhWbFZ6RnpVVWhLYkZwdVRYWmhSMVpvV2toTmRtUklTakZpYlhOM1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWM1VYRkVRMmh0V1ZkV2JRcE5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBWSFEybHpSMEZSVVVKbk56aDNDa0ZTVVVWRmQzZFNaREk1ZVdFeVduTmlNMlJtV2tkc2VtTkhSakJaTW1kM1ZGRlpTMHQzV1VKQ1FVZEVkbnBCUWtaUlVTOUVSREZ2WkVoU2QyTjZiM1lLVERKa2NHUkhhREZaYVRWcVlqSXdkbGt5ZUhCTU1rNXpZVk01YUZrelVuQmlNalY2VEROS01XSnVUWFpQVkVrMFQxUkJNMDVVWXpGTmFUbG9aRWhTYkFwaVdFSXdZM2s0ZUUxQ1dVZERhWE5IUVZGUlFtYzNPSGRCVWxsRlEwRjNSMk5JVm1saVIyeHFUVWxIVEVKbmIzSkNaMFZGUVdSYU5VRm5VVU5DU0RCRkNtVjNRalZCU0dOQk0xUXdkMkZ6WWtoRlZFcHFSMUkwWTIxWFl6TkJjVXBMV0hKcVpWQkxNeTlvTkhCNVowTTRjRGR2TkVGQlFVZFFlRkl4ZW1KblFVRUtRa0ZOUVZORVFrZEJhVVZCS3pobmJGRkplRTlCYUZoQ1FVOVRObE1yT0ZweGQwcGpaSGQzVTNJdlZGZHBhSE16WkV4eFZrRjJiME5KVVVSaWVUbG9NUXBKWTNWRVJYSXJlbk5YYVV3NFVIYzFRMU5VZEd0c2RFbzBNakZ6UlRneFZuWjFOa0Z3VkVGTFFtZG5jV2hyYWs5UVVWRkVRWGRPYmtGRVFtdEJha0VyQ2tSSU4xQXJhR2cwVmtoWFprTlhXSFJ5UzFSdlFrdDFZa0pyUzNCbVYwTlpVWGhxV0UweWRsWXZibEJ4WWxwR1dVOVdXazlpWlRaQlRuSm5lV1J2V1VNS1RVWlZUV0l6ZUhwelJrNVJXWFp6UlZsUGFUSkxibkoyUmpCMFoyOXdiVmhIVm05NmJsb3JjUzh5UVVsRVZ6bEdNVVUzV1RaWk1EWXhaVzkxUVZsa1NBcFhkejA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLIn1dfX0="
                      }
                    ],
                    "timestampVerificationData": {},
                    "certificate": {
                      "rawBytes": "MIIGjTCCBhSgAwIBAgIUWYxqKsrMS3Svl5Ij5ODfBgMJO/IwCgYIKoZIzj0EAwMwNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUwHhcNMjQwNTI5MTYwOTUyWhcNMjQwNTI5MTYxOTUyWjAAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdmghNNw3nU/KueQgspGHW7gh9XLD/WdI8YMB+0p0V4o1kHo6cM1sDJgrCgPQUzxpuYuo+xwPHyl/kDyf3ELjkaOCBTMwggUvMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUqfCPvXKAvS4CdhQ2hbZWJSOEvVowHwYDVR0jBBgwFoAU39Ppz1YkEZb5qNjpKFWixi4YZD8wWgYDVR0RAQH/BFAwToZMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA5BgorBgEEAYO/MAEBBCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMB8GCisGAQQBg78wAQIEEXdvcmtmbG93X2Rpc3BhdGNoMDYGCisGAQQBg78wAQMEKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwGAYKKwYBBAGDvzABBAQKRGVwbG95bWVudDAVBgorBgEEAYO/MAEFBAdjbGkvY2xpMB4GCisGAQQBg78wAQYEEHJlZnMvaGVhZHMvdHJ1bmswOwYKKwYBBAGDvzABCAQtDCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMFwGCisGAQQBg78wAQkETgxMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA4BgorBgEEAYO/MAEKBCoMKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwHQYKKwYBBAGDvzABCwQPDA1naXRodWItaG9zdGVkMCoGCisGAQQBg78wAQwEHAwaaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkwOAYKKwYBBAGDvzABDQQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCAGCisGAQQBg78wAQ4EEgwQcmVmcy9oZWFkcy90cnVuazAZBgorBgEEAYO/MAEPBAsMCTIxMjYxMzA0OTAmBgorBgEEAYO/MAEQBBgMFmh0dHBzOi8vZ2l0aHViLmNvbS9jbGkwGAYKKwYBBAGDvzABEQQKDAg1OTcwNDcxMTBcBgorBgEEAYO/MAESBE4MTGh0dHBzOi8vZ2l0aHViLmNvbS9jbGkvY2xpLy5naXRodWIvd29ya2Zsb3dzL2RlcGxveW1lbnQueW1sQHJlZnMvaGVhZHMvdHJ1bmswOAYKKwYBBAGDvzABEwQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCEGCisGAQQBg78wARQEEwwRd29ya2Zsb3dfZGlzcGF0Y2gwTQYKKwYBBAGDvzABFQQ/DD1odHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaS9hY3Rpb25zL3J1bnMvOTI4OTA3NTc1Mi9hdHRlbXB0cy8xMBYGCisGAQQBg78wARYECAwGcHVibGljMIGLBgorBgEEAdZ5AgQCBH0EewB5AHcA3T0wasbHETJjGR4cmWc3AqJKXrjePK3/h4pygC8p7o4AAAGPxR1zbgAABAMASDBGAiEA+8glQIxOAhXBAOS6S+8ZqwJcdwwSr/TWihs3dLqVAvoCIQDby9h1IcuDEr+zsWiL8Pw5CSTtkltJ421sE81Vvu6ApTAKBggqhkjOPQQDAwNnADBkAjA+DH7P+hh4VHWfCWXtrKToBKubBkKpfWCYQxjXM2vV/nPqbZFYOVZObe6ANrgydoYCMFUMb3xzsFNQYvsEYOi2KnrvF0tgopmXGVoznZ+q/2AIDW9F1E7Y6Y061eouAYdHWw=="
                    }
                  },
                  "dsseEnvelope": {
                    "payload": "eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiZ2hfMi41MC4wX3dpbmRvd3NfYXJtNjQuemlwIiwiZGlnZXN0Ijp7InNoYTI1NiI6IjhhYWQxMjBiNDE2Mzg2YjQyNjllZjYyYzhmZGViY2FkMzFhNzA4NDcyOTc4MTdhMTQ5ZGFmOTI3ZWRjODU1NDgifX1dLCJwcmVkaWNhdGVUeXBlIjoiaHR0cHM6Ly9zbHNhLmRldi9wcm92ZW5hbmNlL3YxIiwicHJlZGljYXRlIjp7ImJ1aWxkRGVmaW5pdGlvbiI6eyJidWlsZFR5cGUiOiJodHRwczovL3Nsc2EtZnJhbWV3b3JrLmdpdGh1Yi5pby9naXRodWItYWN0aW9ucy1idWlsZHR5cGVzL3dvcmtmbG93L3YxIiwiZXh0ZXJuYWxQYXJhbWV0ZXJzIjp7IndvcmtmbG93Ijp7InJlZiI6InJlZnMvaGVhZHMvdHJ1bmsiLCJyZXBvc2l0b3J5IjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkiLCJwYXRoIjoiLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWwifX0sImludGVybmFsUGFyYW1ldGVycyI6eyJnaXRodWIiOnsiZXZlbnRfbmFtZSI6IndvcmtmbG93X2Rpc3BhdGNoIiwicmVwb3NpdG9yeV9pZCI6IjIxMjYxMzA0OSIsInJlcG9zaXRvcnlfb3duZXJfaWQiOiI1OTcwNDcxMSJ9fSwicmVzb2x2ZWREZXBlbmRlbmNpZXMiOlt7InVyaSI6ImdpdCtodHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaUByZWZzL2hlYWRzL3RydW5rIiwiZGlnZXN0Ijp7ImdpdENvbW1pdCI6ImZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAifX1dfSwicnVuRGV0YWlscyI6eyJidWlsZGVyIjp7ImlkIjoiaHR0cHM6Ly9naXRodWIuY29tL2FjdGlvbnMvcnVubmVyL2dpdGh1Yi1ob3N0ZWQifSwibWV0YWRhdGEiOnsiaW52b2NhdGlvbklkIjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvYWN0aW9ucy9ydW5zLzkyODkwNzU3NTIvYXR0ZW1wdHMvMSJ9fX19",
                    "payloadType": "application/vnd.in-toto+json",
                    "signatures": [
                      {
                        "sig": "MEQCIEGIGAm7gZVLLpsrPcjndEjiuctE2/c9+j9KGvazz3rlAiAd6O16T5hkzRM3IbRPzm+xT40mNQZxefd7laDP6x2XLQ=="
                      }
                    ]
                  }
                },
                "repository_id": 1
              }
            ]
          }
        },
        "installation": {
          "permissions": {
            "metadata": "read",
            "issues": "write",
            "contents": "read"
          },
          "repository_selection": "selected",
          "single_file_name": ".github/workflow.yml",
          "repositories_url": "https://api.github.com/user/repos",
          "account": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "has_multiple_single_files": false,
          "single_file_paths": []
        },
        "user-received-public-events-items": {
          "value": [
            {
              "id": "22249084964",
              "type": "PushEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "push_id": 10115855396,
                "size": 1,
                "distinct_size": 1,
                "ref": "refs/heads/master",
                "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                "before": "883efe034920928c47fe18598c01249d1a9fdabd",
                "commits": [
                  {
                    "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                    "author": {
                      "email": "octocat@github.com",
                      "name": "Monalisa Octocat"
                    },
                    "message": "commit",
                    "distinct": true,
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                  }
                ]
              },
              "public": true,
              "created_at": "2022-06-09T12:47:28Z"
            },
            {
              "id": "22196946742",
              "type": "CreateEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "ref": null,
                "ref_type": "repository",
                "master_branch": "master",
                "description": null,
                "pusher_type": "user"
              },
              "public": false,
              "created_at": "2022-06-07T07:50:26Z",
              "org": {
                "id": 9919,
                "login": "github",
                "gravatar_id": "",
                "url": "https://api.github.com/orgs/github",
                "avatar_url": "https://avatars.githubusercontent.com/u/9919?"
              }
            }
          ]
        },
        "combined-billing-usage": {
          "value": {
            "days_left_in_billing_cycle": 20,
            "estimated_paid_storage_for_month": 15,
            "estimated_storage_for_month": 40
          }
        },
        "simple-user-items": {
          "value": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          ]
        },
        "public-user-default-response": {
          "summary": "Default response",
          "value": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false,
            "name": "monalisa octocat",
            "company": "GitHub",
            "blog": "https://github.com/blog",
            "location": "San Francisco",
            "email": "octocat@github.com",
            "hireable": false,
            "bio": "There once was...",
            "twitter_username": "monatheoctocat",
            "public_repos": 2,
            "public_gists": 1,
            "followers": 20,
            "following": 0,
            "created_at": "2008-01-14T04:33:35Z",
            "updated_at": "2008-01-14T04:33:35Z"
          }
        },
        "actions-billing-usage": {
          "value": {
            "total_minutes_used": 305,
            "total_paid_minutes_used": 0,
            "included_minutes": 3000,
            "minutes_used_breakdown": {
              "UBUNTU": 205,
              "MACOS": 10,
              "WINDOWS": 90
            }
          }
        },
        "packages-for-user": {
          "value": [
            {
              "id": 197,
              "name": "hello_docker",
              "package_type": "container",
              "owner": {
                "login": "octocat",
                "id": 9919,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=",
                "avatar_url": "https://avatars.octocatusercontent.com/u/9919?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/github",
                "followers_url": "https://api.github.com/users/github/followers",
                "following_url": "https://api.github.com/users/github/following{/other_user}",
                "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/github/subscriptions",
                "organizations_url": "https://api.github.com/users/github/orgs",
                "repos_url": "https://api.github.com/users/github/repos",
                "events_url": "https://api.github.com/users/github/events{/privacy}",
                "received_events_url": "https://api.github.com/users/github/received_events",
                "type": "User",
                "site_admin": false
              },
              "version_count": 1,
              "visibility": "private",
              "url": "https://api.github.com/orgs/github/packages/container/hello_docker",
              "created_at": "2020-05-19T22:19:11Z",
              "updated_at": "2020-05-19T22:19:11Z",
              "html_url": "https://github.com/orgs/github/packages/container/package/hello_docker"
            },
            {
              "id": 198,
              "name": "goodbye_docker",
              "package_type": "container",
              "owner": {
                "login": "github",
                "id": 9919,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=",
                "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/github",
                "followers_url": "https://api.github.com/users/github/followers",
                "following_url": "https://api.github.com/users/github/following{/other_user}",
                "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/github/subscriptions",
                "organizations_url": "https://api.github.com/users/github/orgs",
                "repos_url": "https://api.github.com/users/github/repos",
                "events_url": "https://api.github.com/users/github/events{/privacy}",
                "received_events_url": "https://api.github.com/users/github/received_events",
                "type": "User",
                "site_admin": false
              },
              "version_count": 2,
              "visibility": "private",
              "url": "https://api.github.com/user/octocat/packages/container/goodbye_docker",
              "created_at": "2020-05-20T22:19:11Z",
              "updated_at": "2020-05-20T22:19:11Z",
              "html_url": "https://github.com/user/octocat/packages/container/package/goodbye_docker"
            }
          ]
        },
        "user-org-events-items": {
          "value": [
            {
              "id": "22249084964",
              "type": "PushEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "push_id": 10115855396,
                "size": 1,
                "distinct_size": 1,
                "ref": "refs/heads/master",
                "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                "before": "883efe034920928c47fe18598c01249d1a9fdabd",
                "commits": [
                  {
                    "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                    "author": {
                      "email": "octocat@github.com",
                      "name": "Monalisa Octocat"
                    },
                    "message": "commit",
                    "distinct": true,
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                  }
                ]
              },
              "public": false,
              "created_at": "2022-06-09T12:47:28Z"
            },
            {
              "id": "22196946742",
              "type": "CreateEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "ref": null,
                "ref_type": "repository",
                "master_branch": "master",
                "description": null,
                "pusher_type": "user"
              },
              "public": false,
              "created_at": "2022-06-07T07:50:26Z",
              "org": {
                "id": 9919,
                "login": "github",
                "gravatar_id": "",
                "url": "https://api.github.com/orgs/github",
                "avatar_url": "https://avatars.githubusercontent.com/u/9919?"
              }
            }
          ]
        },
        "user-events-items": {
          "value": [
            {
              "id": "22249084947",
              "type": "WatchEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "action": "started"
              },
              "public": true,
              "created_at": "2022-06-09T12:47:28Z"
            },
            {
              "id": "22249084964",
              "type": "PushEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "push_id": 10115855396,
                "size": 1,
                "distinct_size": 1,
                "ref": "refs/heads/master",
                "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                "before": "883efe034920928c47fe18598c01249d1a9fdabd",
                "commits": [
                  {
                    "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                    "author": {
                      "email": "octocat@github.com",
                      "name": "Monalisa Octocat"
                    },
                    "message": "commit",
                    "distinct": true,
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                  }
                ]
              },
              "public": false,
              "created_at": "2022-06-07T07:50:26Z"
            }
          ]
        },
        "list-attestations-bulk": {
          "value": {
            "attestations_subject_digests": [
              {
                "sha256:abc": [
                  {
                    "bundle": {
                      "mediaType": "application/vnd.dev.sigstore.bundle.v0.3+json",
                      "verificationMaterial": {
                        "tlogEntries": [
                          {
                            "logIndex": "97913980",
                            "logId": {
                              "keyId": "wNI9atQGlz+VWfO6LRygH4QUfY/8W4RFwiT5i5WRgB0="
                            },
                            "kindVersion": {
                              "kind": "dsse",
                              "version": "0.0.1"
                            },
                            "integratedTime": "1716998992",
                            "inclusionPromise": {
                              "signedEntryTimestamp": "MEYCIQCeEsQAy+qXtULkh52wbnHrkt2R2JQ05P9STK/xmdpQ2AIhANiG5Gw6cQiMnwvUz1+9UKtG/vlC8dduq07wsFOViwSL"
                            },
                            "inclusionProof": {
                              "logIndex": "93750549",
                              "rootHash": "KgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=",
                              "treeSize": "93750551",
                              "hashes": [
                                "8LI21mzwxnUSo0fuZeFsUrz2ujZ4QAL+oGeTG+5toZg=",
                                "nCb369rcIytNhGwWoqBv+eV49X3ZKpo/HJGKm9V+dck=",
                                "hnNQ9mUdSwYCfdV21pd87NucrdRRNZATowlaRR1hJ4A=",
                                "MBhhK33vlD4Tq/JKgAaXUI4VjmosWKe6+7RNpQ2ncNM=",
                                "XKWUE3stvGV1OHsIGiCGfn047Ok6uD4mFkh7BaicaEc=",
                                "Tgve40VPFfuei+0nhupdGpfPPR+hPpZjxgTiDT8WNoY=",
                                "wV+S/7tLtYGzkLaSb6UDqexNyhMvumHK/RpTNvEZuLU=",
                                "uwaWufty6sn6XqO1Tb9M3Vz6sBKPu0HT36mStxJNd7s=",
                                "jUfeMOXQP0XF1JAnCEETVbfRKMUwCzrVUzYi8vnDMVs=",
                                "xQKjzJAwwdlQG/YUYBKPXxbCmhMYKo1wnv+6vDuKWhQ=",
                                "cX3Agx+hP66t1ZLbX/yHbfjU46/3m/VAmWyG/fhxAVc=",
                                "sjohk/3DQIfXTgf/5XpwtdF7yNbrf8YykOMHr1CyBYQ=",
                                "98enzMaC+x5oCMvIZQA5z8vu2apDMCFvE/935NfuPw8="
                              ],
                              "checkpoint": {
                                "envelope": "rekor.sigstore.dev - 2605736670972794746\\n93750551\\nKgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=\\n\\n— rekor.sigstore.dev wNI9ajBEAiBkLzdjY8A9HReU7rmtjwZ+JpSuYtEr9SmvSwUIW7FBjgIgKo+vhkW3tqc+gc8fw9gza3xLoncA8a+MTaJYCaLGA9c=\\n"
                              }
                            },
                            "canonicalizedBody": "eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiZHNzZSIsInNwZWMiOnsiZW52ZWxvcGVIYXNoIjp7ImFsZ29yaXRobSI6InNoYTI1NiIsInZhbHVlIjoiM2I1YzkwNDk5MGFiYzE4NjI1ZWE3Njg4MzE1OGEwZmI4MTEwMjM4MGJkNjQwZjI5OWJlMzYwZWVkOTMxNjYwYiJ9LCJwYXlsb2FkSGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6IjM4ZGNlZDJjMzE1MGU2OTQxMDViYjZiNDNjYjY3NzBiZTYzZDdhNGM4NjNiMTc2YTkwMmU1MGQ5ZTAyN2ZiMjMifSwic2lnbmF0dXJlcyI6W3sic2lnbmF0dXJlIjoiTUVRQ0lFR0lHQW03Z1pWTExwc3JQY2puZEVqaXVjdEUyL2M5K2o5S0d2YXp6M3JsQWlBZDZPMTZUNWhrelJNM0liUlB6bSt4VDQwbU5RWnhlZmQ3bGFEUDZ4MlhMUT09IiwidmVyaWZpZXIiOiJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VkcVZFTkRRbWhUWjBGM1NVSkJaMGxWVjFsNGNVdHpjazFUTTFOMmJEVkphalZQUkdaQ1owMUtUeTlKZDBObldVbExiMXBKZW1vd1JVRjNUWGNLVG5wRlZrMUNUVWRCTVZWRlEyaE5UV015Ykc1ak0xSjJZMjFWZFZwSFZqSk5ValIzU0VGWlJGWlJVVVJGZUZaNllWZGtlbVJIT1hsYVV6RndZbTVTYkFwamJURnNXa2RzYUdSSFZYZElhR05PVFdwUmQwNVVTVFZOVkZsM1QxUlZlVmRvWTA1TmFsRjNUbFJKTlUxVVdYaFBWRlY1VjJwQlFVMUdhM2RGZDFsSUNrdHZXa2w2YWpCRFFWRlpTVXR2V2tsNmFqQkVRVkZqUkZGblFVVmtiV2RvVGs1M00yNVZMMHQxWlZGbmMzQkhTRmMzWjJnNVdFeEVMMWRrU1RoWlRVSUtLekJ3TUZZMGJ6RnJTRzgyWTAweGMwUktaM0pEWjFCUlZYcDRjSFZaZFc4cmVIZFFTSGxzTDJ0RWVXWXpSVXhxYTJGUFEwSlVUWGRuWjFWMlRVRTBSd3BCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVkVKblRsWklVMVZGUkVSQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVdSQ1owNVdTRkUwUlVablVWVnhaa05RQ25aWVMwRjJVelJEWkdoUk1taGlXbGRLVTA5RmRsWnZkMGgzV1VSV1VqQnFRa0puZDBadlFWVXpPVkJ3ZWpGWmEwVmFZalZ4VG1wd1MwWlhhWGhwTkZrS1drUTRkMWRuV1VSV1VqQlNRVkZJTDBKR1FYZFViMXBOWVVoU01HTklUVFpNZVRsdVlWaFNiMlJYU1hWWk1qbDBUREpPYzJGVE9XcGlSMnQyVEcxa2NBcGtSMmd4V1drNU0ySXpTbkphYlhoMlpETk5kbHBIVm5kaVJ6azFZbGRXZFdSRE5UVmlWM2hCWTIxV2JXTjVPVzlhVjBaclkzazVNR051Vm5WaGVrRTFDa0puYjNKQ1owVkZRVmxQTDAxQlJVSkNRM1J2WkVoU2QyTjZiM1pNTTFKMllUSldkVXh0Um1wa1IyeDJZbTVOZFZveWJEQmhTRlpwWkZoT2JHTnRUbllLWW01U2JHSnVVWFZaTWpsMFRVSTRSME5wYzBkQlVWRkNaemM0ZDBGUlNVVkZXR1IyWTIxMGJXSkhPVE5ZTWxKd1l6TkNhR1JIVG05TlJGbEhRMmx6UndwQlVWRkNaemM0ZDBGUlRVVkxSMXBvV2xkWmVWcEhVbXRQUkVacFRVUmplazVxWXpCUFJGRjRUVEpGTTFsNldUQk9iVTVyVFVkS2JWbDZTVEpaZWtGM0NsbFVRWGRIUVZsTFMzZFpRa0pCUjBSMmVrRkNRa0ZSUzFKSFZuZGlSemsxWWxkV2RXUkVRVlpDWjI5eVFtZEZSVUZaVHk5TlFVVkdRa0ZrYW1KSGEzWUtXVEo0Y0UxQ05FZERhWE5IUVZGUlFtYzNPSGRCVVZsRlJVaEtiRnB1VFhaaFIxWm9Xa2hOZG1SSVNqRmliWE4zVDNkWlMwdDNXVUpDUVVkRWRucEJRZ3BEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVk1iVVpxWkVkc2RtSnVUWFZhTW13d1lVaFdhV1JZVG14amJVNTJZbTVTYkdKdVVYVlpNamwwQ2sxR2QwZERhWE5IUVZGUlFtYzNPSGRCVVd0RlZHZDRUV0ZJVWpCalNFMDJUSGs1Ym1GWVVtOWtWMGwxV1RJNWRFd3lUbk5oVXpscVlrZHJka3h0WkhBS1pFZG9NVmxwT1ROaU0wcHlXbTE0ZG1RelRYWmFSMVozWWtjNU5XSlhWblZrUXpVMVlsZDRRV050Vm0xamVUbHZXbGRHYTJONU9UQmpibFoxWVhwQk5BcENaMjl5UW1kRlJVRlpUeTlOUVVWTFFrTnZUVXRIV21oYVYxbDVXa2RTYTA5RVJtbE5SR042VG1wak1FOUVVWGhOTWtVeldYcFpNRTV0VG10TlIwcHRDbGw2U1RKWmVrRjNXVlJCZDBoUldVdExkMWxDUWtGSFJIWjZRVUpEZDFGUVJFRXhibUZZVW05a1YwbDBZVWM1ZW1SSFZtdE5RMjlIUTJselIwRlJVVUlLWnpjNGQwRlJkMFZJUVhkaFlVaFNNR05JVFRaTWVUbHVZVmhTYjJSWFNYVlpNamwwVERKT2MyRlRPV3BpUjJ0M1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWdwRVVWRnhSRU5vYlZsWFZtMU5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBGSENrTnBjMGRCVVZGQ1p6YzRkMEZSTkVWRlozZFJZMjFXYldONU9XOWFWMFpyWTNrNU1HTnVWblZoZWtGYVFtZHZja0puUlVWQldVOHZUVUZGVUVKQmMwMEtRMVJKZUUxcVdYaE5la0V3VDFSQmJVSm5iM0pDWjBWRlFWbFBMMDFCUlZGQ1FtZE5SbTFvTUdSSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhZ3BpUjJ0M1IwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWUlVVdEVRV2N4VDFSamQwNUVZM2hOVkVKalFtZHZja0puUlVWQldVOHZUVUZGVTBKRk5FMVVSMmd3Q21SSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhbUpIYTNaWk1uaHdUSGsxYm1GWVVtOWtWMGwyWkRJNWVXRXlXbk5pTTJSNlRESlNiR05IZUhZS1pWY3hiR0p1VVhWbFZ6RnpVVWhLYkZwdVRYWmhSMVpvV2toTmRtUklTakZpYlhOM1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWM1VYRkVRMmh0V1ZkV2JRcE5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBWSFEybHpSMEZSVVVKbk56aDNDa0ZTVVVWRmQzZFNaREk1ZVdFeVduTmlNMlJtV2tkc2VtTkhSakJaTW1kM1ZGRlpTMHQzV1VKQ1FVZEVkbnBCUWtaUlVTOUVSREZ2WkVoU2QyTjZiM1lLVERKa2NHUkhhREZaYVRWcVlqSXdkbGt5ZUhCTU1rNXpZVk01YUZrelVuQmlNalY2VEROS01XSnVUWFpQVkVrMFQxUkJNMDVVWXpGTmFUbG9aRWhTYkFwaVdFSXdZM2s0ZUUxQ1dVZERhWE5IUVZGUlFtYzNPSGRCVWxsRlEwRjNSMk5JVm1saVIyeHFUVWxIVEVKbmIzSkNaMFZGUVdSYU5VRm5VVU5DU0RCRkNtVjNRalZCU0dOQk0xUXdkMkZ6WWtoRlZFcHFSMUkwWTIxWFl6TkJjVXBMV0hKcVpWQkxNeTlvTkhCNVowTTRjRGR2TkVGQlFVZFFlRkl4ZW1KblFVRUtRa0ZOUVZORVFrZEJhVVZCS3pobmJGRkplRTlCYUZoQ1FVOVRObE1yT0ZweGQwcGpaSGQzVTNJdlZGZHBhSE16WkV4eFZrRjJiME5KVVVSaWVUbG9NUXBKWTNWRVJYSXJlbk5YYVV3NFVIYzFRMU5VZEd0c2RFbzBNakZ6UlRneFZuWjFOa0Z3VkVGTFFtZG5jV2hyYWs5UVVWRkVRWGRPYmtGRVFtdEJha0VyQ2tSSU4xQXJhR2cwVmtoWFprTlhXSFJ5UzFSdlFrdDFZa0pyUzNCbVYwTlpVWGhxV0UweWRsWXZibEJ4WWxwR1dVOVdXazlpWlRaQlRuSm5lV1J2V1VNS1RVWlZUV0l6ZUhwelJrNVJXWFp6UlZsUGFUSkxibkoyUmpCMFoyOXdiVmhIVm05NmJsb3JjUzh5UVVsRVZ6bEdNVVUzV1RaWk1EWXhaVzkxUVZsa1NBcFhkejA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLIn1dfX0="
                          }
                        ],
                        "timestampVerificationData": {},
                        "certificate": {
                          "rawBytes": "MIIGjTCCBhSgAwIBAgIUWYxqKsrMS3Svl5Ij5ODfBgMJO/IwCgYIKoZIzj0EAwMwNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUwHhcNMjQwNTI5MTYwOTUyWhcNMjQwNTI5MTYxOTUyWjAAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdmghNNw3nU/KueQgspGHW7gh9XLD/WdI8YMB+0p0V4o1kHo6cM1sDJgrCgPQUzxpuYuo+xwPHyl/kDyf3ELjkaOCBTMwggUvMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUqfCPvXKAvS4CdhQ2hbZWJSOEvVowHwYDVR0jBBgwFoAU39Ppz1YkEZb5qNjpKFWixi4YZD8wWgYDVR0RAQH/BFAwToZMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA5BgorBgEEAYO/MAEBBCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMB8GCisGAQQBg78wAQIEEXdvcmtmbG93X2Rpc3BhdGNoMDYGCisGAQQBg78wAQMEKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwGAYKKwYBBAGDvzABBAQKRGVwbG95bWVudDAVBgorBgEEAYO/MAEFBAdjbGkvY2xpMB4GCisGAQQBg78wAQYEEHJlZnMvaGVhZHMvdHJ1bmswOwYKKwYBBAGDvzABCAQtDCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMFwGCisGAQQBg78wAQkETgxMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA4BgorBgEEAYO/MAEKBCoMKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwHQYKKwYBBAGDvzABCwQPDA1naXRodWItaG9zdGVkMCoGCisGAQQBg78wAQwEHAwaaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkwOAYKKwYBBAGDvzABDQQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCAGCisGAQQBg78wAQ4EEgwQcmVmcy9oZWFkcy90cnVuazAZBgorBgEEAYO/MAEPBAsMCTIxMjYxMzA0OTAmBgorBgEEAYO/MAEQBBgMFmh0dHBzOi8vZ2l0aHViLmNvbS9jbGkwGAYKKwYBBAGDvzABEQQKDAg1OTcwNDcxMTBcBgorBgEEAYO/MAESBE4MTGh0dHBzOi8vZ2l0aHViLmNvbS9jbGkvY2xpLy5naXRodWIvd29ya2Zsb3dzL2RlcGxveW1lbnQueW1sQHJlZnMvaGVhZHMvdHJ1bmswOAYKKwYBBAGDvzABEwQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCEGCisGAQQBg78wARQEEwwRd29ya2Zsb3dfZGlzcGF0Y2gwTQYKKwYBBAGDvzABFQQ/DD1odHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaS9hY3Rpb25zL3J1bnMvOTI4OTA3NTc1Mi9hdHRlbXB0cy8xMBYGCisGAQQBg78wARYECAwGcHVibGljMIGLBgorBgEEAdZ5AgQCBH0EewB5AHcA3T0wasbHETJjGR4cmWc3AqJKXrjePK3/h4pygC8p7o4AAAGPxR1zbgAABAMASDBGAiEA+8glQIxOAhXBAOS6S+8ZqwJcdwwSr/TWihs3dLqVAvoCIQDby9h1IcuDEr+zsWiL8Pw5CSTtkltJ421sE81Vvu6ApTAKBggqhkjOPQQDAwNnADBkAjA+DH7P+hh4VHWfCWXtrKToBKubBkKpfWCYQxjXM2vV/nPqbZFYOVZObe6ANrgydoYCMFUMb3xzsFNQYvsEYOi2KnrvF0tgopmXGVoznZ+q/2AIDW9F1E7Y6Y061eouAYdHWw=="
                        }
                      },
                      "dsseEnvelope": {
                        "payload": "eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiZ2hfMi41MC4wX3dpbmRvd3NfYXJtNjQuemlwIiwiZGlnZXN0Ijp7InNoYTI1NiI6IjhhYWQxMjBiNDE2Mzg2YjQyNjllZjYyYzhmZGViY2FkMzFhNzA4NDcyOTc4MTdhMTQ5ZGFmOTI3ZWRjODU1NDgifX1dLCJwcmVkaWNhdGVUeXBlIjoiaHR0cHM6Ly9zbHNhLmRldi9wcm92ZW5hbmNlL3YxIiwicHJlZGljYXRlIjp7ImJ1aWxkRGVmaW5pdGlvbiI6eyJidWlsZFR5cGUiOiJodHRwczovL3Nsc2EtZnJhbWV3b3JrLmdpdGh1Yi5pby9naXRodWItYWN0aW9ucy1idWlsZHR5cGVzL3dvcmtmbG93L3YxIiwiZXh0ZXJuYWxQYXJhbWV0ZXJzIjp7IndvcmtmbG93Ijp7InJlZiI6InJlZnMvaGVhZHMvdHJ1bmsiLCJyZXBvc2l0b3J5IjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkiLCJwYXRoIjoiLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWwifX0sImludGVybmFsUGFyYW1ldGVycyI6eyJnaXRodWIiOnsiZXZlbnRfbmFtZSI6IndvcmtmbG93X2Rpc3BhdGNoIiwicmVwb3NpdG9yeV9pZCI6IjIxMjYxMzA0OSIsInJlcG9zaXRvcnlfb3duZXJfaWQiOiI1OTcwNDcxMSJ9fSwicmVzb2x2ZWREZXBlbmRlbmNpZXMiOlt7InVyaSI6ImdpdCtodHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaUByZWZzL2hlYWRzL3RydW5rIiwiZGlnZXN0Ijp7ImdpdENvbW1pdCI6ImZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAifX1dfSwicnVuRGV0YWlscyI6eyJidWlsZGVyIjp7ImlkIjoiaHR0cHM6Ly9naXRodWIuY29tL2FjdGlvbnMvcnVubmVyL2dpdGh1Yi1ob3N0ZWQifSwibWV0YWRhdGEiOnsiaW52b2NhdGlvbklkIjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvYWN0aW9ucy9ydW5zLzkyODkwNzU3NTIvYXR0ZW1wdHMvMSJ9fX19",
                        "payloadType": "application/vnd.in-toto+json",
                        "signatures": [
                          {
                            "sig": "MEQCIEGIGAm7gZVLLpsrPcjndEjiuctE2/c9+j9KGvazz3rlAiAd6O16T5hkzRM3IbRPzm+xT40mNQZxefd7laDP6x2XLQ=="
                          }
                        ]
                      }
                    },
                    "repository_id": 1
                  },
                  {
                    "bundle": {
                      "mediaType": "application/vnd.dev.sigstore.bundle.v0.3+json",
                      "verificationMaterial": {
                        "tlogEntries": [
                          {
                            "logIndex": "97913980",
                            "logId": {
                              "keyId": "wNI9atQGlz+VWfO6LRygH4QUfY/8W4RFwiT5i5WRgB0="
                            },
                            "kindVersion": {
                              "kind": "dsse",
                              "version": "0.0.1"
                            },
                            "integratedTime": "1716998992",
                            "inclusionPromise": {
                              "signedEntryTimestamp": "MEYCIQCeEsQAy+qXtULkh52wbnHrkt2R2JQ05P9STK/xmdpQ2AIhANiG5Gw6cQiMnwvUz1+9UKtG/vlC8dduq07wsFOViwSL"
                            },
                            "inclusionProof": {
                              "logIndex": "93750549",
                              "rootHash": "KgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=",
                              "treeSize": "93750551",
                              "hashes": [
                                "8LI21mzwxnUSo0fuZeFsUrz2ujZ4QAL+oGeTG+5toZg=",
                                "nCb369rcIytNhGwWoqBv+eV49X3ZKpo/HJGKm9V+dck=",
                                "hnNQ9mUdSwYCfdV21pd87NucrdRRNZATowlaRR1hJ4A=",
                                "MBhhK33vlD4Tq/JKgAaXUI4VjmosWKe6+7RNpQ2ncNM=",
                                "XKWUE3stvGV1OHsIGiCGfn047Ok6uD4mFkh7BaicaEc=",
                                "Tgve40VPFfuei+0nhupdGpfPPR+hPpZjxgTiDT8WNoY=",
                                "wV+S/7tLtYGzkLaSb6UDqexNyhMvumHK/RpTNvEZuLU=",
                                "uwaWufty6sn6XqO1Tb9M3Vz6sBKPu0HT36mStxJNd7s=",
                                "jUfeMOXQP0XF1JAnCEETVbfRKMUwCzrVUzYi8vnDMVs=",
                                "xQKjzJAwwdlQG/YUYBKPXxbCmhMYKo1wnv+6vDuKWhQ=",
                                "cX3Agx+hP66t1ZLbX/yHbfjU46/3m/VAmWyG/fhxAVc=",
                                "sjohk/3DQIfXTgf/5XpwtdF7yNbrf8YykOMHr1CyBYQ=",
                                "98enzMaC+x5oCMvIZQA5z8vu2apDMCFvE/935NfuPw8="
                              ],
                              "checkpoint": {
                                "envelope": "rekor.sigstore.dev - 2605736670972794746\\n93750551\\nKgKiXoOl8rM5d4y6Xlbm2QLftvj/FYvTs6z7dJlNO60=\\n\\n— rekor.sigstore.dev wNI9ajBEAiBkLzdjY8A9HReU7rmtjwZ+JpSuYtEr9SmvSwUIW7FBjgIgKo+vhkW3tqc+gc8fw9gza3xLoncA8a+MTaJYCaLGA9c=\\n"
                              }
                            },
                            "canonicalizedBody": "eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiZHNzZSIsInNwZWMiOnsiZW52ZWxvcGVIYXNoIjp7ImFsZ29yaXRobSI6InNoYTI1NiIsInZhbHVlIjoiM2I1YzkwNDk5MGFiYzE4NjI1ZWE3Njg4MzE1OGEwZmI4MTEwMjM4MGJkNjQwZjI5OWJlMzYwZWVkOTMxNjYwYiJ9LCJwYXlsb2FkSGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6IjM4ZGNlZDJjMzE1MGU2OTQxMDViYjZiNDNjYjY3NzBiZTYzZDdhNGM4NjNiMTc2YTkwMmU1MGQ5ZTAyN2ZiMjMifSwic2lnbmF0dXJlcyI6W3sic2lnbmF0dXJlIjoiTUVRQ0lFR0lHQW03Z1pWTExwc3JQY2puZEVqaXVjdEUyL2M5K2o5S0d2YXp6M3JsQWlBZDZPMTZUNWhrelJNM0liUlB6bSt4VDQwbU5RWnhlZmQ3bGFEUDZ4MlhMUT09IiwidmVyaWZpZXIiOiJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VkcVZFTkRRbWhUWjBGM1NVSkJaMGxWVjFsNGNVdHpjazFUTTFOMmJEVkphalZQUkdaQ1owMUtUeTlKZDBObldVbExiMXBKZW1vd1JVRjNUWGNLVG5wRlZrMUNUVWRCTVZWRlEyaE5UV015Ykc1ak0xSjJZMjFWZFZwSFZqSk5ValIzU0VGWlJGWlJVVVJGZUZaNllWZGtlbVJIT1hsYVV6RndZbTVTYkFwamJURnNXa2RzYUdSSFZYZElhR05PVFdwUmQwNVVTVFZOVkZsM1QxUlZlVmRvWTA1TmFsRjNUbFJKTlUxVVdYaFBWRlY1VjJwQlFVMUdhM2RGZDFsSUNrdHZXa2w2YWpCRFFWRlpTVXR2V2tsNmFqQkVRVkZqUkZGblFVVmtiV2RvVGs1M00yNVZMMHQxWlZGbmMzQkhTRmMzWjJnNVdFeEVMMWRrU1RoWlRVSUtLekJ3TUZZMGJ6RnJTRzgyWTAweGMwUktaM0pEWjFCUlZYcDRjSFZaZFc4cmVIZFFTSGxzTDJ0RWVXWXpSVXhxYTJGUFEwSlVUWGRuWjFWMlRVRTBSd3BCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVkVKblRsWklVMVZGUkVSQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVdSQ1owNVdTRkUwUlVablVWVnhaa05RQ25aWVMwRjJVelJEWkdoUk1taGlXbGRLVTA5RmRsWnZkMGgzV1VSV1VqQnFRa0puZDBadlFWVXpPVkJ3ZWpGWmEwVmFZalZ4VG1wd1MwWlhhWGhwTkZrS1drUTRkMWRuV1VSV1VqQlNRVkZJTDBKR1FYZFViMXBOWVVoU01HTklUVFpNZVRsdVlWaFNiMlJYU1hWWk1qbDBUREpPYzJGVE9XcGlSMnQyVEcxa2NBcGtSMmd4V1drNU0ySXpTbkphYlhoMlpETk5kbHBIVm5kaVJ6azFZbGRXZFdSRE5UVmlWM2hCWTIxV2JXTjVPVzlhVjBaclkzazVNR051Vm5WaGVrRTFDa0puYjNKQ1owVkZRVmxQTDAxQlJVSkNRM1J2WkVoU2QyTjZiM1pNTTFKMllUSldkVXh0Um1wa1IyeDJZbTVOZFZveWJEQmhTRlpwWkZoT2JHTnRUbllLWW01U2JHSnVVWFZaTWpsMFRVSTRSME5wYzBkQlVWRkNaemM0ZDBGUlNVVkZXR1IyWTIxMGJXSkhPVE5ZTWxKd1l6TkNhR1JIVG05TlJGbEhRMmx6UndwQlVWRkNaemM0ZDBGUlRVVkxSMXBvV2xkWmVWcEhVbXRQUkVacFRVUmplazVxWXpCUFJGRjRUVEpGTTFsNldUQk9iVTVyVFVkS2JWbDZTVEpaZWtGM0NsbFVRWGRIUVZsTFMzZFpRa0pCUjBSMmVrRkNRa0ZSUzFKSFZuZGlSemsxWWxkV2RXUkVRVlpDWjI5eVFtZEZSVUZaVHk5TlFVVkdRa0ZrYW1KSGEzWUtXVEo0Y0UxQ05FZERhWE5IUVZGUlFtYzNPSGRCVVZsRlJVaEtiRnB1VFhaaFIxWm9Xa2hOZG1SSVNqRmliWE4zVDNkWlMwdDNXVUpDUVVkRWRucEJRZ3BEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVk1iVVpxWkVkc2RtSnVUWFZhTW13d1lVaFdhV1JZVG14amJVNTJZbTVTYkdKdVVYVlpNamwwQ2sxR2QwZERhWE5IUVZGUlFtYzNPSGRCVVd0RlZHZDRUV0ZJVWpCalNFMDJUSGs1Ym1GWVVtOWtWMGwxV1RJNWRFd3lUbk5oVXpscVlrZHJka3h0WkhBS1pFZG9NVmxwT1ROaU0wcHlXbTE0ZG1RelRYWmFSMVozWWtjNU5XSlhWblZrUXpVMVlsZDRRV050Vm0xamVUbHZXbGRHYTJONU9UQmpibFoxWVhwQk5BcENaMjl5UW1kRlJVRlpUeTlOUVVWTFFrTnZUVXRIV21oYVYxbDVXa2RTYTA5RVJtbE5SR042VG1wak1FOUVVWGhOTWtVeldYcFpNRTV0VG10TlIwcHRDbGw2U1RKWmVrRjNXVlJCZDBoUldVdExkMWxDUWtGSFJIWjZRVUpEZDFGUVJFRXhibUZZVW05a1YwbDBZVWM1ZW1SSFZtdE5RMjlIUTJselIwRlJVVUlLWnpjNGQwRlJkMFZJUVhkaFlVaFNNR05JVFRaTWVUbHVZVmhTYjJSWFNYVlpNamwwVERKT2MyRlRPV3BpUjJ0M1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWdwRVVWRnhSRU5vYlZsWFZtMU5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBGSENrTnBjMGRCVVZGQ1p6YzRkMEZSTkVWRlozZFJZMjFXYldONU9XOWFWMFpyWTNrNU1HTnVWblZoZWtGYVFtZHZja0puUlVWQldVOHZUVUZGVUVKQmMwMEtRMVJKZUUxcVdYaE5la0V3VDFSQmJVSm5iM0pDWjBWRlFWbFBMMDFCUlZGQ1FtZE5SbTFvTUdSSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhZ3BpUjJ0M1IwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWUlVVdEVRV2N4VDFSamQwNUVZM2hOVkVKalFtZHZja0puUlVWQldVOHZUVUZGVTBKRk5FMVVSMmd3Q21SSVFucFBhVGgyV2pKc01HRklWbWxNYlU1MllsTTVhbUpIYTNaWk1uaHdUSGsxYm1GWVVtOWtWMGwyWkRJNWVXRXlXbk5pTTJSNlRESlNiR05IZUhZS1pWY3hiR0p1VVhWbFZ6RnpVVWhLYkZwdVRYWmhSMVpvV2toTmRtUklTakZpYlhOM1QwRlpTMHQzV1VKQ1FVZEVkbnBCUWtWM1VYRkVRMmh0V1ZkV2JRcE5iVkpyV2tSbmVGbHFRVE5OZWxrelRrUm5NRTFVVG1oT01rMHlUa1JhYWxwRVFtbGFiVTE1VG0xTmQwMUhSWGROUTBWSFEybHpSMEZSVVVKbk56aDNDa0ZTVVVWRmQzZFNaREk1ZVdFeVduTmlNMlJtV2tkc2VtTkhSakJaTW1kM1ZGRlpTMHQzV1VKQ1FVZEVkbnBCUWtaUlVTOUVSREZ2WkVoU2QyTjZiM1lLVERKa2NHUkhhREZaYVRWcVlqSXdkbGt5ZUhCTU1rNXpZVk01YUZrelVuQmlNalY2VEROS01XSnVUWFpQVkVrMFQxUkJNMDVVWXpGTmFUbG9aRWhTYkFwaVdFSXdZM2s0ZUUxQ1dVZERhWE5IUVZGUlFtYzNPSGRCVWxsRlEwRjNSMk5JVm1saVIyeHFUVWxIVEVKbmIzSkNaMFZGUVdSYU5VRm5VVU5DU0RCRkNtVjNRalZCU0dOQk0xUXdkMkZ6WWtoRlZFcHFSMUkwWTIxWFl6TkJjVXBMV0hKcVpWQkxNeTlvTkhCNVowTTRjRGR2TkVGQlFVZFFlRkl4ZW1KblFVRUtRa0ZOUVZORVFrZEJhVVZCS3pobmJGRkplRTlCYUZoQ1FVOVRObE1yT0ZweGQwcGpaSGQzVTNJdlZGZHBhSE16WkV4eFZrRjJiME5KVVVSaWVUbG9NUXBKWTNWRVJYSXJlbk5YYVV3NFVIYzFRMU5VZEd0c2RFbzBNakZ6UlRneFZuWjFOa0Z3VkVGTFFtZG5jV2hyYWs5UVVWRkVRWGRPYmtGRVFtdEJha0VyQ2tSSU4xQXJhR2cwVmtoWFprTlhXSFJ5UzFSdlFrdDFZa0pyUzNCbVYwTlpVWGhxV0UweWRsWXZibEJ4WWxwR1dVOVdXazlpWlRaQlRuSm5lV1J2V1VNS1RVWlZUV0l6ZUhwelJrNVJXWFp6UlZsUGFUSkxibkoyUmpCMFoyOXdiVmhIVm05NmJsb3JjUzh5UVVsRVZ6bEdNVVUzV1RaWk1EWXhaVzkxUVZsa1NBcFhkejA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLIn1dfX0="
                          }
                        ],
                        "timestampVerificationData": {},
                        "certificate": {
                          "rawBytes": "MIIGjTCCBhSgAwIBAgIUWYxqKsrMS3Svl5Ij5ODfBgMJO/IwCgYIKoZIzj0EAwMwNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUwHhcNMjQwNTI5MTYwOTUyWhcNMjQwNTI5MTYxOTUyWjAAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdmghNNw3nU/KueQgspGHW7gh9XLD/WdI8YMB+0p0V4o1kHo6cM1sDJgrCgPQUzxpuYuo+xwPHyl/kDyf3ELjkaOCBTMwggUvMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUqfCPvXKAvS4CdhQ2hbZWJSOEvVowHwYDVR0jBBgwFoAU39Ppz1YkEZb5qNjpKFWixi4YZD8wWgYDVR0RAQH/BFAwToZMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA5BgorBgEEAYO/MAEBBCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMB8GCisGAQQBg78wAQIEEXdvcmtmbG93X2Rpc3BhdGNoMDYGCisGAQQBg78wAQMEKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwGAYKKwYBBAGDvzABBAQKRGVwbG95bWVudDAVBgorBgEEAYO/MAEFBAdjbGkvY2xpMB4GCisGAQQBg78wAQYEEHJlZnMvaGVhZHMvdHJ1bmswOwYKKwYBBAGDvzABCAQtDCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMFwGCisGAQQBg78wAQkETgxMaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWxAcmVmcy9oZWFkcy90cnVuazA4BgorBgEEAYO/MAEKBCoMKGZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAwHQYKKwYBBAGDvzABCwQPDA1naXRodWItaG9zdGVkMCoGCisGAQQBg78wAQwEHAwaaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkwOAYKKwYBBAGDvzABDQQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCAGCisGAQQBg78wAQ4EEgwQcmVmcy9oZWFkcy90cnVuazAZBgorBgEEAYO/MAEPBAsMCTIxMjYxMzA0OTAmBgorBgEEAYO/MAEQBBgMFmh0dHBzOi8vZ2l0aHViLmNvbS9jbGkwGAYKKwYBBAGDvzABEQQKDAg1OTcwNDcxMTBcBgorBgEEAYO/MAESBE4MTGh0dHBzOi8vZ2l0aHViLmNvbS9jbGkvY2xpLy5naXRodWIvd29ya2Zsb3dzL2RlcGxveW1lbnQueW1sQHJlZnMvaGVhZHMvdHJ1bmswOAYKKwYBBAGDvzABEwQqDChmYWVmMmRkZDgxYjA3MzY3NDg0MTNhN2M2NDZjZDBiZmMyNmMwMGEwMCEGCisGAQQBg78wARQEEwwRd29ya2Zsb3dfZGlzcGF0Y2gwTQYKKwYBBAGDvzABFQQ/DD1odHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaS9hY3Rpb25zL3J1bnMvOTI4OTA3NTc1Mi9hdHRlbXB0cy8xMBYGCisGAQQBg78wARYECAwGcHVibGljMIGLBgorBgEEAdZ5AgQCBH0EewB5AHcA3T0wasbHETJjGR4cmWc3AqJKXrjePK3/h4pygC8p7o4AAAGPxR1zbgAABAMASDBGAiEA+8glQIxOAhXBAOS6S+8ZqwJcdwwSr/TWihs3dLqVAvoCIQDby9h1IcuDEr+zsWiL8Pw5CSTtkltJ421sE81Vvu6ApTAKBggqhkjOPQQDAwNnADBkAjA+DH7P+hh4VHWfCWXtrKToBKubBkKpfWCYQxjXM2vV/nPqbZFYOVZObe6ANrgydoYCMFUMb3xzsFNQYvsEYOi2KnrvF0tgopmXGVoznZ+q/2AIDW9F1E7Y6Y061eouAYdHWw=="
                        }
                      },
                      "dsseEnvelope": {
                        "payload": "eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiZ2hfMi41MC4wX3dpbmRvd3NfYXJtNjQuemlwIiwiZGlnZXN0Ijp7InNoYTI1NiI6IjhhYWQxMjBiNDE2Mzg2YjQyNjllZjYyYzhmZGViY2FkMzFhNzA4NDcyOTc4MTdhMTQ5ZGFmOTI3ZWRjODU1NDgifX1dLCJwcmVkaWNhdGVUeXBlIjoiaHR0cHM6Ly9zbHNhLmRldi9wcm92ZW5hbmNlL3YxIiwicHJlZGljYXRlIjp7ImJ1aWxkRGVmaW5pdGlvbiI6eyJidWlsZFR5cGUiOiJodHRwczovL3Nsc2EtZnJhbWV3b3JrLmdpdGh1Yi5pby9naXRodWItYWN0aW9ucy1idWlsZHR5cGVzL3dvcmtmbG93L3YxIiwiZXh0ZXJuYWxQYXJhbWV0ZXJzIjp7IndvcmtmbG93Ijp7InJlZiI6InJlZnMvaGVhZHMvdHJ1bmsiLCJyZXBvc2l0b3J5IjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkiLCJwYXRoIjoiLmdpdGh1Yi93b3JrZmxvd3MvZGVwbG95bWVudC55bWwifX0sImludGVybmFsUGFyYW1ldGVycyI6eyJnaXRodWIiOnsiZXZlbnRfbmFtZSI6IndvcmtmbG93X2Rpc3BhdGNoIiwicmVwb3NpdG9yeV9pZCI6IjIxMjYxMzA0OSIsInJlcG9zaXRvcnlfb3duZXJfaWQiOiI1OTcwNDcxMSJ9fSwicmVzb2x2ZWREZXBlbmRlbmNpZXMiOlt7InVyaSI6ImdpdCtodHRwczovL2dpdGh1Yi5jb20vY2xpL2NsaUByZWZzL2hlYWRzL3RydW5rIiwiZGlnZXN0Ijp7ImdpdENvbW1pdCI6ImZhZWYyZGRkODFiMDczNjc0ODQxM2E3YzY0NmNkMGJmYzI2YzAwYTAifX1dfSwicnVuRGV0YWlscyI6eyJidWlsZGVyIjp7ImlkIjoiaHR0cHM6Ly9naXRodWIuY29tL2FjdGlvbnMvcnVubmVyL2dpdGh1Yi1ob3N0ZWQifSwibWV0YWRhdGEiOnsiaW52b2NhdGlvbklkIjoiaHR0cHM6Ly9naXRodWIuY29tL2NsaS9jbGkvYWN0aW9ucy9ydW5zLzkyODkwNzU3NTIvYXR0ZW1wdHMvMSJ9fX19",
                        "payloadType": "application/vnd.in-toto+json",
                        "signatures": [
                          {
                            "sig": "MEQCIEGIGAm7gZVLLpsrPcjndEjiuctE2/c9+j9KGvazz3rlAiAd6O16T5hkzRM3IbRPzm+xT40mNQZxefd7laDP6x2XLQ=="
                          }
                        ]
                      }
                    },
                    "repository_id": 1
                  }
                ]
              }
            ]
          }
        },
        "bulk-subject-digest-body-with-predicate-type": {
          "value": {
            "subject_digests": [
              "sha256:abc123",
              "sha512:def456"
            ],
            "predicateType": "provenance"
          }
        },
        "user-public-events-items": {
          "value": [
            {
              "id": "22249084947",
              "type": "WatchEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "action": "started"
              },
              "public": true,
              "created_at": "2022-06-09T12:47:28Z"
            },
            {
              "id": "22249084964",
              "type": "PushEvent",
              "actor": {
                "id": 583231,
                "login": "octocat",
                "display_login": "octocat",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
              },
              "repo": {
                "id": 1296269,
                "name": "octocat/Hello-World",
                "url": "https://api.github.com/repos/octocat/Hello-World"
              },
              "payload": {
                "push_id": 10115855396,
                "size": 1,
                "distinct_size": 1,
                "ref": "refs/heads/master",
                "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                "before": "883efe034920928c47fe18598c01249d1a9fdabd",
                "commits": [
                  {
                    "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                    "author": {
                      "email": "octocat@github.com",
                      "name": "Monalisa Octocat"
                    },
                    "message": "commit",
                    "distinct": true,
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                  }
                ]
              },
              "public": true,
              "created_at": "2022-06-08T23:29:25Z"
            }
          ]
        },
        "package-user": {
          "value": {
            "id": 40201,
            "name": "octo-name",
            "package_type": "rubygems",
            "owner": {
              "login": "octocat",
              "id": 209477,
              "node_id": "MDQ6VXNlcjIwOTQ3Nw==",
              "avatar_url": "https://avatars.githubusercontent.com/u/209477?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": true
            },
            "version_count": 3,
            "visibility": "public",
            "url": "https://api.github.com/users/octocat/packages/rubygems/octo-name",
            "created_at": "2019-10-20T14:17:14Z",
            "updated_at": "2019-10-20T14:17:14Z",
            "repository": {
              "id": 216219492,
              "node_id": "MDEwOlJlcG9zaXRvcnkyMTYyMTk0OTI=",
              "name": "octo-name-repo",
              "full_name": "octocat/octo-name-repo",
              "private": false,
              "owner": {
                "login": "octocat",
                "id": 209477,
                "node_id": "MDQ6VXNlcjIwOTQ3Nw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/209477?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": true
              },
              "html_url": "https://github.com/octocat/octo-name-repo",
              "description": "Project for octocats",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/octo-name-repo",
              "forks_url": "https://api.github.com/repos/octocat/octo-name-repo/forks",
              "keys_url": "https://api.github.com/repos/octocat/octo-name-repo/keys{/key_id}",
              "collaborators_url": "https://api.github.com/repos/octocat/octo-name-repo/collaborators{/collaborator}",
              "teams_url": "https://api.github.com/repos/octocat/octo-name-repo/teams",
              "hooks_url": "https://api.github.com/repos/octocat/octo-name-repo/hooks",
              "issue_events_url": "https://api.github.com/repos/octocat/octo-name-repo/issues/events{/number}",
              "events_url": "https://api.github.com/repos/octocat/octo-name-repo/events",
              "assignees_url": "https://api.github.com/repos/octocat/octo-name-repo/assignees{/user}",
              "branches_url": "https://api.github.com/repos/octocat/octo-name-repo/branches{/branch}",
              "tags_url": "https://api.github.com/repos/octocat/octo-name-repo/tags",
              "blobs_url": "https://api.github.com/repos/octocat/octo-name-repo/git/blobs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/octo-name-repo/git/tags{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/octo-name-repo/git/refs{/sha}",
              "trees_url": "https://api.github.com/repos/octocat/octo-name-repo/git/trees{/sha}",
              "statuses_url": "https://api.github.com/repos/octocat/octo-name-repo/statuses/{sha}",
              "languages_url": "https://api.github.com/repos/octocat/octo-name-repo/languages",
              "stargazers_url": "https://api.github.com/repos/octocat/octo-name-repo/stargazers",
              "contributors_url": "https://api.github.com/repos/octocat/octo-name-repo/contributors",
              "subscribers_url": "https://api.github.com/repos/octocat/octo-name-repo/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/octo-name-repo/subscription",
              "commits_url": "https://api.github.com/repos/octocat/octo-name-repo/commits{/sha}",
              "git_commits_url": "https://api.github.com/repos/octocat/octo-name-repo/git/commits{/sha}",
              "comments_url": "https://api.github.com/repos/octocat/octo-name-repo/comments{/number}",
              "issue_comment_url": "https://api.github.com/repos/octocat/octo-name-repo/issues/comments{/number}",
              "contents_url": "https://api.github.com/repos/octocat/octo-name-repo/contents/{+path}",
              "compare_url": "https://api.github.com/repos/octocat/octo-name-repo/compare/{base}...{head}",
              "merges_url": "https://api.github.com/repos/octocat/octo-name-repo/merges",
              "archive_url": "https://api.github.com/repos/octocat/octo-name-repo/{archive_format}{/ref}",
              "downloads_url": "https://api.github.com/repos/octocat/octo-name-repo/downloads",
              "issues_url": "https://api.github.com/repos/octocat/octo-name-repo/issues{/number}",
              "pulls_url": "https://api.github.com/repos/octocat/octo-name-repo/pulls{/number}",
              "milestones_url": "https://api.github.com/repos/octocat/octo-name-repo/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/octo-name-repo/notifications{?since,all,participating}",
              "labels_url": "https://api.github.com/repos/octocat/octo-name-repo/labels{/name}",
              "releases_url": "https://api.github.com/repos/octocat/octo-name-repo/releases{/id}",
              "deployments_url": "https://api.github.com/repos/octocat/octo-name-repo/deployments"
            },
            "html_url": "https://github.com/octocat/octo-name-repo/packages/40201"
          }
        },
        "packages-billing-usage": {
          "value": {
            "total_gigabytes_bandwidth_used": 50,
            "total_paid_gigabytes_bandwidth_used": 40,
            "included_gigabytes_bandwidth": 10
          }
        },
        "minimal-repository-items": {
          "value": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": false,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "has_discussions": false,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "security_and_analysis": {
                "advanced_security": {
                  "status": "enabled"
                },
                "secret_scanning": {
                  "status": "enabled"
                },
                "secret_scanning_push_protection": {
                  "status": "disabled"
                },
                "secret_scanning_non_provider_patterns": {
                  "status": "disabled"
                }
              }
            }
          ]
        },
        "organization-simple-items": {
          "value": [
            {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            }
          ]
        },
        "base-gist-items": {
          "value": [
            {
              "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
              "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
              "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
              "id": "aa5a315d61ae9438b18d",
              "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
              "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
              "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
              "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
              "files": {
                "hello_world.rb": {
                  "filename": "hello_world.rb",
                  "type": "application/x-ruby",
                  "language": "Ruby",
                  "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                  "size": 167
                }
              },
              "public": true,
              "created_at": "2010-04-14T02:15:15Z",
              "updated_at": "2011-06-20T11:34:15Z",
              "description": "Hello World Examples",
              "comments": 0,
              "user": null,
              "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "truncated": false
            }
          ]
        },
        "public-user-response-with-git-hub-plan-information": {
          "summary": "Response with GitHub plan information",
          "value": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false,
            "name": "monalisa octocat",
            "company": "GitHub",
            "blog": "https://github.com/blog",
            "location": "San Francisco",
            "email": "octocat@github.com",
            "hireable": false,
            "bio": "There once was...",
            "twitter_username": "monatheoctocat",
            "public_repos": 2,
            "public_gists": 1,
            "followers": 20,
            "following": 0,
            "created_at": "2008-01-14T04:33:35Z",
            "updated_at": "2008-01-14T04:33:35Z",
            "plan": {
              "name": "pro",
              "space": 976562499,
              "collaborators": 0,
              "private_repos": 9999
            }
          }
        }
      },
      "responses": {
        "billing_usage_report_user": {
          "description": "Response when getting a billing usage report",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing-usage-report-user"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/billing-usage-report-user"
                }
              }
            }
          }
        },
        "package_es_list_error": {
          "description": "The value of `per_page` multiplied by `page` cannot be greater than 10000."
        },
        "requires_authentication": {
          "description": "Requires authentication",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/basic-error"
              }
            }
          }
        },
        "service_unavailable": {
          "description": "Service unavailable",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "documentation_url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "forbidden": {
          "description": "Forbidden",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/basic-error"
              }
            }
          }
        },
        "internal_error": {
          "description": "Internal Error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/basic-error"
              }
            }
          }
        },
        "not_found": {
          "description": "Resource not found",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/basic-error"
              }
            }
          }
        },
        "validation_failed": {
          "description": "Validation failed, or the endpoint has been spammed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validation-error"
              }
            }
          }
        },
        "bad_request": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/basic-error"
              }
            },
            "application/scim+json": {
              "schema": {
                "$ref": "#/components/schemas/scim-error"
              }
            }
          }
        }
      }
    }
  },